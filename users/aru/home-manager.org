#+TITLE: Home Manager Configuration
#+PROPERTY: header-args :noweb no-export :mkdirp yes

This is my home-manager literate configuration which you can generate
with ~M-x org-babel-tangle~.

This is the main ~default.nix~ which just imports the generated
home-manager config.

#+begin_src nix :tangle default.nix
{ ...
}:

{
  imports = [ ./generated/home-manager-config.nix ];
}
#+end_src

There are also some useful functions I may use through the config,
those are specified at the very bottom of this file, [[*Useful functions][here]].

* Home manager
** Config

This is the actual main config, which imports the selected
configurations for each package, like alacritty, zsh, nvim, etc.

#+begin_src nix :tangle generated/home-manager-config.nix
# Auto-generated from "home-manager.org"
{ pkgs
, lib
, config
, ...
}:

{
  <<home.manager.setup>>

  imports = [
    # <<alacritty.imports>>
    <<common-lisp.imports>>
    <<eclipse.imports>>
    <<emacs.imports>>
    <<email.imports>>
    <<eww.imports>>
    <<discord.imports>>
    <<firefox.imports>>
    <<fonts.imports>>
    <<fzf.imports>>
    <<git.imports>>
    <<gpg.imports>>
    <<gtk.imports>>
    <<java.imports>>
    # <<koreader.imports>>
    <<neovim.imports>>
    <<obs-studio.imports>>
    <<plantuml.imports>>
    <<python.imports>>
    <<qt.imports>>
    <<ssh.imports>>
    <<starship.imports>>
    <<swappy.imports>>
    <<sway.imports>>
    <<swaylock.imports>>
    <<termusic.imports>>
    <<texlive.imports>>
    <<user.imports>>
    <<waybar.imports>>
    <<wezterm.imports>>
    <<wofi.imports>>
    <<xdg.imports>>
    <<zsh.imports>>
  ];
}
#+end_src

** Setup

Home manager setup, which actually just enables home-manager and sets
its version.
*TODO: Learn nix flakes and use that*

#+NAME: home.manager.setup
#+begin_src nix
programs.home-manager.enable = true;
home.stateVersion = "22.05";
#+end_src

* Alacritty

Select the stuff to import:

#+NAME: alacritty.imports
#+begin_src nix
{
  <<alacritty.config>>
  <<alacritty.enable>>
}
#+end_src

** Config

I have separated the config in diferent chunks for better
organization:

#+NAME: alacritty.config
#+begin_src nix
programs.alacritty.settings = {
  window = {
    <<alacritty.config.window>>
  };

  scrolling = {
    <<alacritty.config.scrolling>>
  };

  font = {
    <<alacritty.config.fonts>>
  };

  colors = {
    <<alacritty.config.colors>>
  };

  cursor = {
    <<alacritty.config.cursor>>
  };

  mouse = {
    <<alacritty.config.mouse>>
  };

  key_bindings = [
    <<alacritty.config.bindings.keys>>
  ];

  mouse_bindings = [
    <<alacritty.config.bindings.mouse>>
  ];

  <<alacritty.config.others>>
};
#+end_src

*** Window

*TODO: Actually use dynamic title (configuring starship I think you
can, or with zsh).*

#+NAME: alacritty.config.window
#+begin_src nix
opacity = 0.8;
title = "Alacritty";
dynamic_title = true;

padding = {
  x = 5;
  y = 5;
};

class = {
  instance = "Alacritty";
  general = "Alacritty";
};
#+end_src

*** Scrolling

Nix' switch generations uses a lot of output.

#+NAME: alacritty.config.scrolling
#+begin_src nix
history = 10000;
multiplier = 4;
#+end_src

*** Fonts

I like Iosevka.

#+NAME: alacritty.config.fonts
#+begin_src nix
size = 12.0;

normal = {
  family = "Iosevka";
  style = "Medium";
};

bold = {
  family = "Iosevka";
  style = "Bold";
};

italic = {
  family = "Iosevka";
  style = "Italic";
};

bold_italic = {
  family = "Iosevka";
  style = "Bold Italic";
};
#+end_src

*** Colors

I like gruvbox.

#+NAME: alacritty.config.colors
#+begin_src nix
primary = {
  background = "0x1d2021";
  foreground = "0xebdbb2";
};

normal = {
  black =   "0x282828";
  red =     "0xcc241d";
  green =   "0x98971a";
  yellow =  "0xd79921";
  blue =    "0x458588";
  magenta = "0xb16286";
  cyan =    "0x689d6a";
  white =   "0xa89984";
};

bright = {
  black =   "0x928374";
  red =     "0xfb4934";
  green =   "0xb8bb26";
  yellow =  "0xfabd2f";
  blue =    "0x83a598";
  magenta = "0xd3869b";
  cyan =    "0x8ec07c";
  white =   "0xebdbb2";
};
#+end_src

*** Cursor

Do not blink, but if you did each second should do.

#+NAME: alacritty.config.cursor
#+begin_src nix
blink_interval = 1000;
unfocused_hollow = false;
thickness = 1;

style = {
  shape = "Block";
  blinking = "Never";
};
#+end_src

*** Mouse

When I need my mouse (rarely) I cant find it.

#+NAME: alacritty.config.mouse
#+begin_src nix
hide_when_typing = false;
# hints.launcher.program = "";
#+end_src

*** Bindings
**** Keys

Heresy not to have ~C-S-v~ and ~C-S-c~ to copy and paste.

#+NAME: alacritty.config.bindings.keys
#+begin_src nix
{ mods = "Control";       key = "L"; action = "ClearLogNotice"; }
{ mods = "Control|Shift"; key = "V"; action = "Paste"; }
{ mods = "Control|Shift"; key = "C"; action = "Copy"; }
#+end_src

**** Mouse

If ya lazy to ~C-S-v~, use ~mouse-3~.

#+NAME: alacritty.config.bindings.mouse
#+begin_src nix
{ mouse = "Middle"; action = "PasteSelection"; }
#+end_src

*** Others

#+NAME: alacritty.config.others
#+begin_src nix
live_config_reload = true;
working_directory = "None";
draw_bold_text_with_bright_colors = true;
#+end_src

** Enable

#+NAME: alacritty.enable
#+begin_src nix
programs.alacritty.enable = true;
#+end_src

* Common Lisp

Select the stuff to import:

#+NAME: common-lisp.imports
#+begin_src nix
{
  <<common-lisp.packages>>
  <<common-lisp.session-variables>>
  <<common-lisp.symlinked-files>>
}
#+end_src

** Config
*** Sbclrc

Sbcl init file:

#+begin_src lisp :tangle generated/sbcl-config-init.lisp
#-quicklisp
(let ((ql-init
        (merge-pathnames "setup.lisp"
                         (concatenate 'string
                                      (sb-ext:posix-getenv "NIX_QUICKLISP_DIR")
                                      "/"))))
  (when (probe-file ql-init)
    (load ql-init)))

(setf sb-impl::*default-external-format* :utf-8)
#+end_src

*** Common Lisp registry

#+begin_src conf :tangle generated/asdf-config.conf
(:tree "/GitRepos/common-lisp/")
#+end_src

** Packages

#+NAME: common-lisp.packages
#+begin_src nix
home.packages = with pkgs; [
  sbcl
  lispPackages.quicklisp
  lispPackages.asdf
];
#+end_src

** Session Variables

#+NAME: common-lisp.session-variables
#+begin_src nix
home.sessionVariables = {
  NIX_QUICKLISP_DIR = "${config.xdg.dataHome}/quicklisp";
};
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: common-lisp.symlinked-files
#+begin_src nix
home.file = {
  ".sbclrc".source = ./sbcl-config-init.lisp;
};

xdg.configFile =
  let cl-registry = "common-lisp/source-registry.conf.d";
  in {
    "${cl-registry}/asdf.conf".source = ./asdf-config.conf;
  };
#+end_src

* Eclipse

Select the stuff to import:

#+NAME: eclipse.imports
#+begin_src nix
{
  <<eclipse.config>>
  <<eclipse.enable>>
}
#+end_src

** Config

Not much config possible for eclipse, just the package to use:

#+NAME: eclipse.config
#+begin_src nix
programs.eclipse = {
  package = pkgs.eclipses.eclipse-java;
  plugins = with pkgs.eclipses.plugins; [
    vrapper
  ];
};
#+end_src

** Enable

#+NAME: eclipse.enable
#+begin_src nix
programs.eclipse.enable = true;
#+end_src

* Emacs

Select the stuff to import:

#+NAME: emacs.imports
#+begin_src nix
{
  <<emacs.config>>
  <<emacs.enable>>
  <<emacs.overlays>>
  <<emacs.overrides>>
  <<emacs.packages>>
  <<emacs.symlinked-files>>
}
#+end_src

** Config

The config is separated in diferent chunks:

#+NAME: emacs.config
#+begin_src nix
programs.emacs = {
  package = pkgs.emacsPgtk;
};

services.emacs = {
  defaultEditor = true;
};
#+end_src

Here is the emacs config, also seperated in chunks:

#+begin_src lisp :tangle generated/emacs-config.el
<<emacs.config.user-data>>
<<emacs.config.ui>>
<<emacs.config.keybindings>>
<<emacs.config.org>>
<<emacs.config.email>>
<<emacs.config.development>>
<<emacs.config.others>>
#+end_src

*** User data
:PROPERTIES:
:header-args: :noweb-ref emacs.config.user-data
:END:

#+begin_src emacs-lisp
(setq user-full-name    "Alberto Robles Gomez"
      user-mail-address "aru_hackZ.official@zohomail.eu")
#+end_src

*** UI
:PROPERTIES:
:header-args: :noweb-ref emacs.config.ui
:END:
**** Basic config

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
#+end_src

**** Column numbers

By default column number will be enabled in all buffers but
~org-mode~, ~term-mode~ and ~shell-mode~ won't do so.

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                slime-repl-mode-hook
                treemacs-mode-hook
                mu4e-main-mode-hook
                mu4e-headers-mode-hook
                mu4e-view-mode-hook
                mu4e-compose-mode-hook
                mu4e-org-mode-hook
                mu4e~update-mail-mode-hook
                mu4e-loading-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

**** Startup

#+begin_src emacs-lisp
(custom-set-variables
 '(inhibit-startup-screen t)
 '(initial-buffer-choice t))
#+end_src

**** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka" :height 120)
(set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 120)
(set-face-attribute 'variable-pitch nil :font "Iosevka" :height 120)
#+end_src

**** Theme

#+begin_src emacs-lisp
(load-theme 'gruvbox-dark-hard t)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
gruvbox-theme
#+end_src

**** Ivy

#+begin_src emacs-lisp
(ivy-mode 1)
(ivy-rich-mode 1)
#+end_src

***** Theming

#+begin_src emacs-lisp
(all-the-icons-ivy-rich-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
ivy
lsp-ivy
ivy-rich
all-the-icons-ivy-rich
#+end_src

**** Counsel

#+begin_src emacs-lisp
(counsel-mode 1)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
counsel
#+end_src

**** All the icons

Getting those juicy icons

#+begin_src emacs-lisp
(require 'all-the-icons)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
all-the-icons
#+end_src

**** Doom modeline
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
doom-modeline
#+end_src

***** Basic config

#+begin_src emacs-lisp
(doom-modeline-mode 1)
#+end_src

#+begin_src emacs-lisp
(setq doom-modeline-height 30)
#+end_src

**** Svg Tags
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
svg-tag-mode
#+end_src

***** Basic config

#+begin_src emacs-lisp
(require 'svg-tag-mode)
#+end_src

#+begin_src emacs-lisp
(setq svg-tag-tags
      '((":TODO:" . aru/org-svg-tag-todo)
        ("#\\+[a-zA-Z]+:" . aru/org-svg-tag-settings)))
#+end_src

***** Custom faces
****** Org

#+begin_src emacs-lisp
(defface aru/face-org-svg-tag-todo
  '((t :foreground "#98971a"
       :background "#282828"
       :box        (:line-width 1 :color "#98971a" :style nil)
       :weight     bold
       :family     unspecified
       :inherit    default))
  "Face for todo svg tags"
  :group nil)

(defface aru/face-org-svg-tag-settings
  '((t :foreground "#7c6f64"
       :background "#282828"
       :box        (:line-width 1 :color "#7c6f64" :style nil)
       :weight     bold
       :family     unspecified
       :inherit    default))
  "Face for title svg tags"
  :group nil)
#+end_src

***** Custom tags
****** Org

#+begin_src emacs-lisp
; (setq aru/org-svg-tag-todo
;       (svg-tag-make "TODO" 'aru/face-org-svg-tag-todo 2 0 5))

; (defun aru/org-svg-tag-settings (text)
;   (svg-tag-make (substring text 2 -1) 'aru/face-org-svg-tag-settings 2 0 5))
#+end_src

**** Which key

#+begin_src emacs-lisp
(setq which-key-idle-delay .5)
(which-key-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
which-key
#+end_src

**** Rainbow delimiters
***** Hooks

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
rainbow-delimiters
#+end_src

**** Diff
***** Basic config

#+begin_src emacs-lisp
(defun aru/diff-faces ()
  (set-face-attribute 'diff-refine-removed nil
		      :background "#252122"
		      :foreground "#fb4934")
  (set-face-attribute 'diff-refine-added nil
		      :background "#212421"
		      :foreground "#98971a"))
#+end_src

*** Keybindings
:PROPERTIES:
:header-args: :noweb-ref emacs.config.keybindings
:END:
**** Random stuff

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

Make emacs recognize ~_~ as part of a word:

#+begin_src emacs-lisp
(modify-syntax-entry ?_ "w")
#+end_src

**** Evil

So evil-collection works:

#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
#+end_src

Activating evil mode:

#+begin_src emacs-lisp
(evil-mode 1)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
evil
#+end_src

**** Evil collection

#+begin_src emacs-lisp
(evil-collection-init)

(setq evil-collection-outline-bind-tab-p t
      evil-collection-calendar-want-org-bindings t
      evil-collection-setup-minibuffer t)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
evil-collection
#+end_src

**** General

#+begin_src emacs-lisp
(setq general-override-states '(insert
                                emacs
                                hybrid
                                normal
                                visual
                                motion
                                operator
                                replace))
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :states '(normal visual motion)
 :keymaps 'override
 :prefix "SPC"
 :non-normal-prefix "M-<return>"

 ; Treemacs
 "t" '(:ignore t :which-key "Treemacs")

 "t t" '(treemacs :which-key "Toggle treemacs sidebar")

 ; Buffer
 "b" '(:ignore t :which-key "Buffer")

 "b <right>" '(switch-to-next-buffer :which-key "Next")
 "b <left>" '(switch-to-prev-buffer :which-key "Previous")
 "b s" '(switch-to-buffer :which-key "Select")
 "b w" '(switch-to-buffer-other-window :which-key "Select to other window")

 "b k" '(:ignore t :which-key "Kill")
 "b k o" '(kill-buffer :which-key "Other")
 "b k f" '(kill-current-buffer :which-key "Focused")

 ; Window
 "w" '(:ignore t :which-key "Window")

 "w <up>" '(windmove-up :which-key "Top")
 "w <right>" '(windmove-right :which-key "Right")
 "w <down>" '(windmove-down :which-key "Bottom")
 "w <left>" '(windmove-left :which-key "Left")

 "w s" '(:ignore t :which-key "Split")
 "w s <right>" '(split-window-right :which-key "Right")
 "w s <down>" '(split-window-below :which-key "Below")

 "w d" '(:ignore t :which-key "Delete")
 "w d o" '(delete-other-window :which-key "Other")
 "w d f" '(delete-window :which-key "Focused")
 "w d <up>" '(windmove-delete-up :which-key "Top")
 "w d <right>" '(windmove-delete-right :which-key "Right")
 "w d <down>" '(windmove-delete-down :which-key "Bottom")
 "w d <left>" '(windmove-delete-left :which-key "Left")

 ; Web server
 "C-w" '(:ignore t :which-key "Web server")
 "C-w o" '(aru/web-server-open :which-key "Open web server")
 "C-w k" '(aru/web-server-kill :which-key "Kill current web server")

 ; Magit
 "m" '(magit :which-key "Magit")

 ; Mu4e (Email)
 "e" '(mu4e :which-key "Mu4e"))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
general
#+end_src

*** Org
:PROPERTIES:
:header-args: :noweb-ref emacs.config.org
:END:
**** Basic config

#+begin_src emacs-lisp
(setq org-directory "~/Archive/Org/"

      org-ellipsis " ▾"

      org-priority-default 5
      org-priority-highest 1
      org-priority-lowest 5

      org-startup-folded t
      org-startup-indented t

      org-list-allow-alphabetical t

      org-edit-src-content-indentation 0

      org-todo-keywords '((sequencep "TODO(t)"
                                     "NEXT(n)"
                                     "|"
                                     "DONE(d)"
                                     "CANCELED(x)"))

      org-fancy-priorities-list '((?1 . "➀")
                                  (?2 . "➁")
                                  (?3 . "➂")
                                  (?4 . "➃")
                                  (?5 . "➄"))

      org-priority-faces '((?1 . (:foreground "#cc241d" :weight extrabold))
                           (?2 . (:foreground "#d65d0e" :weight bold))
                           (?3 . (:foreground "#d79921" :weight semibold))
                           (?4 . (:foreground "#98971a"))
                           (?5 . (:foreground "#689d6a"))))
#+end_src

**** UI tweaks
***** Visual fill

Making org buffers display on the center of the available space

#+begin_src emacs-lisp
(defun aru/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+end_src

****** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
visual-fill-column
#+end_src

**** Agenda

Not in use right now, copying my old config, I should start using it
again tho.

***** Basic config

#+begin_src emacs-lisp
(setq org-agenda-fontify-priorities t
      org-agenda-hide-tags-regexp "."

      org-agenda-files '("~/Archive/Org/inbox.org"
                         "~/Archive/Org/agenda.org"
                         "~/Archive/Org/notes.org"
                         "~/Archive/Org/projects.org")

      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))

      org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags-todo "projects"
                     ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'nottodo '("TODO")))
                      (org-agenda-overriding-header "\nProjects\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                 (org-agenda-overriding-header "\nCompleted today\n")))))
        ("d" "Deadlines"
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'nottode '("NEXT")))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-overriding-header "\nDeadlines\n"))))))
#+end_src

***** Advices

#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before
            (lambda (&rest _)
              (org-save-all-org-buffers)))
#+end_src

**** Capture
***** Basic config

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file "~/Archive/Org/inbox.org")
         "* TODO %?\n/Entered on/ %U")
        ("m" "Meeting" entry (file+headline "~/Archive/Org/agenda.org" "Future")
         "* %? :meeting:\n<%<%Y-%m-%d %a %H:00>>")
        ("n" "Note" entry (file "~/Archive/Org/notes.org")
         "* NOTE (%a)\n/Entered on/ %U/n/n%?")
        ("@" "Inbox [mu4e]" entry (file "~/Archive/Org/inbox.org")
         "* TODO Reply to \"%a\" %?\n/Entered on/ %U")))
#+end_src

**** Refile
***** Basic config

#+begin_src emacs-lisp
(setq org-refile-targets '(("~/Documents/ORG/projects.org"
                      :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
#+end_src

***** Advices

#+begin_src emacs-lisp
(advice-add 'org-refile :before
            (lambda (&rest _)
              (org-save-all-org-buffers)))
#+end_src

**** Log
***** Basic config

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

***** Functions

#+begin_src emacs-lisp
(defun aru/log-todo-next-creation-date (&rest _)
  "Log NEXT creation time inthe property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d %H:%M]"))))
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'org-after-todo-state-change-hook #'aru/log-todo-next-creation-date)
#+end_src

**** Publish
***** HTML
****** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
htmlize
#+end_src

****** Basic config

#+begin_src emacs-lisp
(setq org-html-head-include-default-style nil
      org-html-htmlize-output-type 'css
      org-html-html5-fancy t
      org-html-doctype "html5"
      org-html-checkbox-type 'unicode
      org-export-allow-bind-keywords t)
#+end_src

****** Project list

#+begin_src emacs-lisp :noweb-ref emacs.config.nix-expanded+
(setq org-publish-project-alist
      (let* ((org-publish-path "${config.xdg.userDirs.extraConfig.XDG_PUBLISH_DIR}")
             (org-project-path "${config.xdg.userDirs.extraConfig.XDG_ORG_DIR}")
             (org-project-name (string-replace "/" "_" org-project-path)))
      `((,org-project-path
         :components (,(concat org-project-name ".org")
                      ;,(concat org-project-name ".static")
                      ,(concat org-project-name ".scss-generation")))
        (,(concat org-project-name ".org")
         :headline-levels 6
         :recursive t
         :base-extension "org"
         :base-directory ,org-project-path
         :publishing-directory ,(concat org-publish-path "/Org")
         :publishing-function org-html-publish-to-html)
        ;(,(concat org-project-name ".static")
         ;:recursive t
         ;:base-extension ""
         ;:base-directory ,org-project-path
         ;:publishing-directory ,(concat org-publish-path "/Org")
         ;:publishing-function org-publish-attachment)
        (,(concat org-project-name ".scss-generation")
         :recursive t
         :base-extension "scss"
         :base-directory ,org-project-path
         :publishing-directory ,(concat org-publish-path "/Org")
         :publishing-function aru/org-scss-generation))))
#+end_src

****** Functions

#+begin_src emacs-lisp
(defun aru/org-scss-generation (plist filename pub-dir)
  (let* ((visiting (find-buffer-visiting filename))
         (scss-buffer (or visiting (find-file-noselect filename))))
    (with-current-buffer scss-buffer
      (compile (concat "sass -t compressed --update"
                       " "
                       filename
                       ":"
                       (org-export-output-file-name ".css" nil pub-dir))))
    (unless visiting (kill-buffer scss-buffer))))
#+end_src

****** Fixes

#+begin_src emacs-lisp
(with-eval-after-load 'org-element
  (defun org-element-plain-list-parser (limit affiliated structure)
    "Parse a plain list.

LIMIT bounds the search.  AFFILIATED is a list of which CAR is
the buffer position at the beginning of the first affiliated
keyword and CDR is a plist of affiliated keywords along with
their value.  STRUCTURE is the structure of the plain list being
parsed.

Return a list whose CAR is `plain-list' and CDR is a plist
containing `:type', `:begin', `:end', `:contents-begin' and
`:contents-end', `:structure', `:post-blank' and
`:post-affiliated' keywords.

Assume point is at the beginning of the list."
    (save-excursion
      (let* ((struct (or structure (org-element--list-struct limit)))
             (ol-alpha nil)
             (type (cond ((looking-at-p "[ \t]*[a-z]")
                          (setq ol-alpha 'lower) 'ordered)
                         ((looking-at-p "[ \t]*[A-Z]")
                          (setq ol-alpha 'upper) 'ordered)
                         ((looking-at-p "[ \t]*[0-9]") 'ordered)
                         ((nth 5 (assq (point) struct)) 'descriptive)
                         (t 'unordered)))
             (contents-begin (point))
             (begin (car affiliated))
             (contents-end (let* ((item (assq contents-begin struct))
                                  (ind (nth 1 item))
                                  (pos (nth 6 item)))
                             (while (and (setq item (assq pos struct))
                                         (= (nth 1 item) ind))
                               (setq pos (nth 6 item)))
                             pos))
             (end (progn (goto-char contents-end)
                         (skip-chars-forward " \r\t\n" limit)
                         (if (= (point) limit) limit (line-beginning-position)))))
        ;; Return value.
        (list 'plain-list
              (nconc
               (list :type type
                     :ol-alpha ol-alpha
                     :begin begin
                     :end end
                     :contents-begin contents-begin
                     :contents-end contents-end
                     :structure struct
                     :post-blank (count-lines contents-end end)
                     :post-affiliated contents-begin)
               (cdr affiliated)))))))

(with-eval-after-load 'ox-html
  (defun org-html-plain-list (plain-list contents _info)
    "Transcode a PLAIN-LIST element from Org to HTML.
CONTENTS is the contents of the list.  INFO is a plist holding
contextual information."
    (let* ((alpha nil)
           (type (pcase (org-element-property :type plain-list)
                   (`ordered (pcase (org-element-property :ol-alpha plain-list)
                               (`lower (setq alpha "lower-alpha"))
                               (`upper (setq alpha "upper-alpha")))
                             "ol")
                   (`unordered "ul")
                   (`descriptive "dl")
                   (other (error "Unknown HTML list type: %s" other))))
           (class (format "org-%s" type))
           (attributes (org-export-read-attribute :attr_html plain-list)))
      (format "<%s %s>\n%s</%s>"
              type
              (org-html--make-attribute-string
               (plist-put attributes :class
                          (org-trim
                           (mapconcat #'identity
                                      (list class alpha (plist-get attributes :class))
                                      " "))))
              contents
              type))))
#+end_src

****** Modified export functions
******* Removing cells and rows from org tables

When using org tables, I like to remove some columns I may use to
declare functions or values not needed when exported, just for
calculations or that stuff. And thats what this function does

The rows with its first cell marked with a ~<_>~ and columns marked
with a ~<~>~ are searched and removed at export (the original file
isn't overwritten).

#+begin_src emacs-lisp
(defun aru/org-export-delete-special-cols-n-rows (back-end)
   (while (re-search-forward "^[ \t]*| +\\(<_>\\) +|" nil t)
          (goto-char (match-beginning 1))
          (org-table-kill-row)
          (beginning-of-line))
   (beginning-of-buffer)
   (while (re-search-forward "| +\\(<~>\\) +|" nil t)
          (goto-char (match-beginning 1))
          (org-table-delete-column)
          (beginning-of-line)))
#+end_src

******* Remove empty table cells and make its siblings expand

This is still in WIP, no idea how to add the atributte ~rowspan~ or
~collspan~ to the sibling cells.

#+begin_src emacs-lisp
(defun org-html-table-cell (table-cell contents info)
  (let* ((table-cell-address (org-export-table-cell-address table-cell info))
         (table-row (org-export-get-parent table-cell))
         (table (org-export-get-parent-table table-cell))
         (cell-attrs
           (if (not (plist-get info :html-table-align-individual-fields))
               ""
               (format (if (and (boundp 'org-html-format-table-no-css)
                                org-html-format-table-no-css)
                           " align=\"%s\""
                           " class=\"org-%s\"")
                       (org-export-table-cell-alignment table-cell info)))))
    (cond
      ((or (not contents)
           (string= "" (org-trim contents)))
       "")
      ((and (org-export-table-has-header-p table info)
            (= 1 (org-export-table-row-group table-row info)))
       (let ((header-tags (plist-get info :html-table-header-tags)))
         (concat "\n"
                 (format (car header-tags) "col" cell-attrs)
                 contents
                 (cdr header-tags))))
      ((and (plist-get info :html-table-use-header-tags-for-first-column)
            (zerop (cdr (org-export-table-cell-address table-cell info))))
       (let ((header-tags (plist-get info :html-table-header-tags)))
         (concat "\n"
                 (format (car header-tags) "row" cell-attrs)
                 contents
                 (cdr header-tags))))
      (t
       (let ((data-tags (plist-get info :html-table-data-tags)))
         (concat "\n"
                 (format (car data-tags) cell-attrs)
                 contents
                 (cdr data-tags)))))))
#+end_src

****** Hooks

#+begin_src emacs-lisp
(add-hook 'org-export-before-processing-hook
          #'aru/org-export-delete-special-cols-n-rows)
#+end_src

**** Faces

#+begin_src emacs-lisp
(defun aru/org-faces ()
  (dolist (face '((org-document-title . 1.5)
                  (org-level-1 . 1.4)
                  (org-level-2 . 1.25)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.05)
                  (org-level-7 . 1.05)))
    (set-face-attribute (car face) nil :font "Iosevka" :height (cdr face))))
#+end_src

**** Superstar
***** Basic config

#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("◉" "◈" "⬠" "⬡" "○"))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
org-superstar
#+end_src

**** Hooks

#+begin_src emacs-lisp
(defun aru/org-hook ()
  (set-face-attribute 'org-ellipsis nil :underline nil)
  (org-superstar-mode 1)
  (turn-on-auto-fill)
  (aru/org-faces)
  (aru/org-mode-visual-fill)
  (aru/org-plantuml-mode-hook)
  (aru/org-shell-mode-hook))
#+end_src

#+begin_src emacs-lisp
(defun aru/org-src-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'aru/org-hook)
(add-hook 'org-src-mode-hook #'aru/org-src-hook)
#+end_src

**** Plantuml
***** Basic config

#+begin_src emacs-lisp
(defun aru/org-plantuml-mode-hook ()
  (setq org-plantuml-executable-path (getenv "PLANTUML_BIN"))
  (setq org-plantuml-exec-mode 'plantuml)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))

(setq plantuml-executable-path (getenv "PLANTUML_BIN"))
(setq plantuml-default-exec-mode 'executable)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
plantuml-mode
#+end_src

**** Shell
***** Basic config

#+begin_src emacs-lisp
(defun aru/org-shell-mode-hook ()
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
#+end_src

**** Latex
***** Basic config

#+begin_src emacs-lisp
(setq org-format-latex-options '(:foreground "#8ec07c"
                                 :background default
                                 :scale 1.0
                                 :html-foreground "Black"
                                 :html-background "Transparent"
                                 :html-scale 1.0
                                 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

*** Email
:PROPERTIES:
:header-args: :noweb-ref emacs.config.email
:END:
**** Basic config

First time I needed to add this ...

#+begin_src emacs-lisp
(require 'mu4e)
#+end_src

Also autostart pinentry (I need it also for git):

#+begin_src emacs-lisp
(pinentry-start)
#+end_src

I would like if this was auto generated in some way from the nix
config:

#+begin_src emacs-lisp
(setq mu4e-refile-folder "/Archive"
      mu4e-drafts-folder "/Drafts"
      mu4e-sent-folder "/Sent"
      mu4e-trash-folder "/Trash"
      mu4e-compose-signature "Alberto (a.k.a. aru)"
      mu4e-compose-signature-auto-include t
      mu4e-use-fancy-chars t
      mu4e-get-mail-command "mbsync aru"
      mu4e-update-interval 60
      mu4e-sent-messages-behavior 'sent

      mail-user-agent 'mu4e-user-agent

      message-send-mail-function 'smtpmail-send-it)
#+end_src

#+begin_src emacs-lisp :noweb-ref emacs.config.nix-expanded+
(setq mu4e-attachment-dir "${config.xdg.userDirs.extraConfig.XDG_MAIL_DIR}")
#+end_src

**** SMTP config

#+begin_src emacs-lisp
(setq smtpmail-smtp-server "smtp.zoho.eu"
      smtpmail-smtp-service 465
      smtpmail-smtp-user "aru_hackZ.official@zohomail.eu"
      smtpmail-stream-type 'ssl)
#+end_src

**** Auth config

Setting up the auth store:

#+begin_src emacs-lisp
(auth-source-pass-enable)

(setq auth-source-debug t
      auth-source-do-cache nil
      auth-sources '(password-store))
#+end_src

#+begin_src emacs-lisp :noweb-ref emacs.config.nix-expanded+
(setq auth-source-pass-filename "${config.xdg.userDirs.extraConfig.XDG_KEYS_DIR}")
#+end_src

With that you can create folders in ~XDG_KEYS_HOME~ named with the
server and inside place gpg files named after the username of the SMTP
server with the password. In my case it would be
~smtp.zoho.eu/aru_hackZ.official@zohomail.eu.gpg~.

**** MML config

Using some gpg key as default

#+begin_src emacs-lisp
(setq mml-secure-key-preferences
      '((OpenPGP
         (sign ("aru_hackZ.official@zohomail.eu"
                "D7D93ECFDA731BE3159F6BD93A581BDE765C0DFA"))
         (encrypt ("aru_hackZ.official@zohomail.eu"
                   "D7D93ECFDA731BE3159F6BD93A581BDE765C0DFA"))))
      mml-secure-openpgp-sign-with-sender t)
#+end_src

**** Notifications

I will be using ~mu4e-alert~ for this.

***** Basic config

Using libnotify

#+begin_src emacs-lisp
(mu4e-alert-set-default-style 'libnotify)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+end_src

**** Hooks

#+begin_src emacs-lisp
(add-hook 'message-send-hook #'mml-secure-message-sign-pgpmime)
#+end_src

**** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
# To make sure that mu is in load-path, since it seems there are people
# reporting it doesn't appear in their's, no problem in mine tho
pkgs.mu

mu4e-alert
pinentry
#+end_src

*** Development
:PROPERTIES:
:header-args: :noweb-ref emacs.config.development
:END:
**** LSP
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lsp-mode
lsp-ui
#+end_src

#+begin_src nix :noweb-ref emacs.packages+
nodePackages.vscode-css-languageserver-bin
nodePackages.vscode-html-languageserver-bin
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'lsp-ui-mode)
(add-hook 'lsp-mode-hook #'flycheck-mode)
#+end_src

**** Dap
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
dap-mode
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'dap-mode)
#+end_src

**** Flycheck

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
flycheck
#+end_src

**** Treemacs
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
treemacs
lsp-treemacs
treemacs-all-the-icons
#+end_src

***** Basic config

#+begin_src emacs-lisp
(lsp-treemacs-sync-mode 1)
#+end_src

***** Theming

Making it use all-the-icons instead of default icons.

#+begin_src emacs-lisp
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")
#+end_src

**** Dired
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
all-the-icons-dired
#+end_src

***** Theming

Making dired use all-the-icons too!

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
#+end_src

**** Projectile
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
projectile
#+end_src

***** Basic config

#+begin_src emacs-lisp
(projectile-mode +1)
#+end_src

**** Web mode
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
web-mode
#+end_src

***** Auto modes

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.nix?\\'" . nix-mode))
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/web-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        2)
  (web-mode-use-tabs)
  (global-set-key (kbd "C-SPC") 'emmet-expand-line)
  (add-hook 'after-save-hook #'aru/scss-compile-maybe))
#+end_src

#+begin_src emacs-lisp
(add-hook 'web-mode-hook #'lsp)
(add-hook 'web-mode-hook #'emmet-mode)
(add-hook 'web-mode-hook #'aru/web-mode-hook)
#+end_src

**** Scss
***** Basic config

Adding scss to lsp languages (giving it an id/name):

#+begin_src emacs-lisp
(add-to-list 'lsp-language-id-configuration '(".*\\.scss" . "scss"))
#+end_src

***** Functions

Default variables:

#+begin_src emacs-lisp
(defcustom aru/do-compile-scss nil
  "Wanna compile scss?"
  :type 'boolean)

(defcustom aru/scss-sass-options '()
  "Scss compile options"
  :type '(repeat string))

(defcustom aru/scss-output-directory nil
  "Output directory for compiled files"
  :type '(choice (const :tag "Same dir" nil)
                 (string :tag "Relative dir")))
#+end_src

Scss compile function:

#+begin_src emacs-lisp
(defun aru/scss-compile ()
  (interactive)
  (compile (concat "sass"
                   " "
                   (mapconcat 'identity aru/scss-sass-options " ")
                   " --update "
                   (when (string-match ".*/" buffer-file-name)
                     (concat "'" (match-string 0 buffer-file-name) "'"))
                   (when aru/scss-output-directory
                     (concat ":'" aru/scss-output-directory "'")))))
#+end_src

Check if the file is a scss file:
**TODO: Make a scss mode for an easier way to do this*

#+begin_src emacs-lisp
(defun aru/is-scss-file ()
  (interactive)
  (if (string=
       (file-name-extension (buffer-file-name (window-buffer (minibuffer-selected-window))))
       "scss")
      t nil))
#+end_src

If it's a scss file, compile unless it was declared not to do so.

#+begin_src emacs-lisp
(defun aru/scss-compile-maybe ()
  (if (and (aru/is-scss-file)
           aru/do-compile-scss)
      (aru/scss-compile)))
#+end_src

**** Emmet
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
emmet-mode
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/emmet-mode-hook ()
  (setq emmet-self-closing-tag-style " /"
        emmet-move-cursor-between-quotes t))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emmet-mode-hook #'aru/emmet-mode-hook)
#+end_src

**** Java
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lsp-java
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/java-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        4))
#+end_src

#+begin_src emacs-lisp
(add-hook 'java-mode-hook #'lsp)
(add-hook 'java-mode-hook #'aru/java-mode-hook)
#+end_src

**** Lua
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lua-mode
company-lua
#+end_src

***** Basic config

#+begin_src emacs-lisp
(setq lua-indent-level 4)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/lua-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'lua-mode-hook #'aru/lua-mode-hook)
#+end_src

**** Elisp
***** Hooks
#+begin_src emacs-lisp
(defun aru/elisp-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aru/elisp-mode-hook)
#+end_src

**** Lisp
***** Hooks

#+begin_src emacs-lisp
(defun aru/lisp-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook #'aru/lisp-mode-hook)
#+end_src

**** Nix
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
nix-mode
#+end_src

**** Magit
***** Basic config

#+begin_src emacs-lisp
(setq magit-diff-highlight-trailing t
      magit-diff-paint-whitespace t
      magit-diff-refine-ignore-whitespace nil
      magit-diff-refine-hunk 'all)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
magit
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'magit-mode-hook #'aru/diff-faces)
#+end_src

**** Company
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
company
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-company-mode)
#+end_src

**** Slime
***** Basic config

#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
slime
slime-company
#+end_src

**** Yasnippet
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
yasnippet
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'yas-global-mode)
#+end_src

**** Yaml
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
yaml-mode
#+end_src

**** Lispy
***** Basic config

#+begin_src emacs-lisp
(defun aru/check-closing-paren ()
  (interactive "*")
  (if (= (char-after) ?\))
      (forward-char)
    (insert ")")))
#+end_src

***** Keybindings

#+begin_src emacs-lisp
(general-define-key
 :states '(insert)
 :keymaps '(lisp-mode-map emacs-lisp-mode-map)
 "(" 'lispy-parens
 ")" 'aru/check-closing-paren)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lispy
#+end_src

**** Nxml
***** Basic config

Tag folding:

#+begin_src emacs-lisp
(require 'hideshow)
(require 'sgml-mode)
(require 'nxml-mode)

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))

(add-hook 'nxml-mode-hook 'hs-minor-mode)

;; optional key bindings, easier than hs defaults
(define-key nxml-mode-map (kbd "C-c C-f") 'hs-toggle-hiding)
#+end_src

#+begin_src emacs-lisp
(setq nxml-attribute-indent 2)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/nxml-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        2)
  (global-set-key (kbd "C-SPC") #'emmet-expand-line))
#+end_src

#+begin_src emacs-lisp
(add-hook 'nxml-mode-hook #'aru/nxml-mode-hook)
(add-hook 'nxml-mode-hook #'lsp)
(add-hook 'nxml-mode-hook #'emmet-mode)
#+end_src

**** Web server

#+begin_src emacs-lisp
(defvar *aru/web-server-ports-opened* '())
(defvar *aru/web-server-port-default* 8000)

(defun aru/web-server-add-opened-port (name port)
  (push (cons name port) *aru/web-server-ports-opened*))

(defun aru/web-server-remove-opened-port (name)
  (let ((name-port-cons (assoc name *aru/web-server-ports-opened*)))
    (setq *aru/web-server-ports-opened*
          (delq name-port-cons *aru/web-server-ports-opened*))
    (cdr name-port-cons)))

(defun aru/web-server-get-new-port ()
  (require 'dash)
  (if (length= *aru/web-server-ports-opened* 0)
      *aru/web-server-port-default*
    (1+ (cdr (--max-by (> (cdr it) (cdr other))
                       *aru/web-server-ports-opened*)))))

(defun aru/web-server-get-name ()
  (format "web-server-%s" (projectile-project-name)))

(defun aru/web-server-open ()
  (interactive)
  (let ((name (aru/web-server-get-name)))
    (if (get-process name)
        (message "Web server already started in this project.")
      (aru/web-server--open name))))

(defun aru/web-server--open (name)
  (let* ((port (aru/web-server-get-new-port))
         (cmd (format "python3 -m http.server --directory %s %d"
                     (projectile-project-root)
                     port))
         (buffer-name (format "*%s*" name)))
    (start-process-shell-command name buffer-name cmd)
    (aru/web-server-add-opened-port name port)
    (message "Web server started on port %d" port)))

(defun aru/web-server-kill ()
  (interactive)
  (let* ((name (aru/web-server-get-name))
         (process (get-process name)))
    (if process
        (aru/web-server--kill process name)
      (message "Can't stop what isn't started."))))

(defun aru/web-server--kill (process name)
  (delete-process process)
  (message "Web server on port %d closed."
           (aru/web-server-remove-opened-port name)))
#+end_src

*** Others
:PROPERTIES:
:header-args: :noweb-ref emacs.config.others
:END:

#+begin_src emacs-lisp
(setq backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

#+begin_src emacs-lisp :noweb-ref emacs.config.nix-expanded+
(setq backup-directory-alist '(("." . "${config.xdg.configHome}/emacs/backup/")))
#+end_src

**** Elcord
***** Basic config

#+begin_src emacs-lisp
(require 'elcord)
(elcord-mode)

(setq elcord-refresh-rate 5)
#+end_src

***** Package

#+begin_src nix :noweb-ref emacs.extra-packages+
elcord
#+end_src

** Enable

#+NAME: emacs.enable
#+begin_src nix
programs.emacs.enable = true;

# Note: not working (at least for me)
services.emacs.enable = true;
services.emacs.client.enable = true;
services.emacs.socketActivation.enable = true;
#+end_src

** Overlays

Using emacs pure gtk package since I'm using wayland.

#+NAME: emacs.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<emacs.overlays.emacs-nixpkgs>>
  )
];
#+end_src

*** Emacs nixpkgs

#+NAME: emacs.overlays.emacs-nixpkgs
#+begin_src nix
let
  repo = "https://github.com/nix-community/emacs-overlay";
  commit = "7368fbf298996bc024396c1cdb1e194f7a2cd3c6";
in import (builtins.fetchTarball {
  url = "${repo}/archive/${commit}.tar.gz";
})
#+end_src

** Overrides

Override org package to use elpa instead of builtin

#+NAME: emacs.overrides
#+begin_src nix
programs.emacs.overrides = self: super: {
  org = self.elpaPackages.org;
};
#+end_src

** Packages

#+NAME: emacs.packages
#+begin_src nix
home.packages = with pkgs; [
  <<emacs.packages+>>
];

programs.emacs.extraPackages = (epkgs: with epkgs; [
  <<emacs.extra-packages+>>
]);
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: emacs.symlinked-files
#+begin_src nix
xdg.configFile = {
  "emacs/init.el".text = builtins.concatStringsSep "\n" [
    (lib.strings.fileContents ./emacs-config.el)
    ''
    <<emacs.config.nix-expanded+>>
    ''
  ];
};
#+end_src

