#+TITLE: Home Manager Configuration
#+PROPERTY: header-args :noweb no-export :mkdirp yes

This is my home-manager literate configuration which you can generate
with ~M-x org-babel-tangle~.

This is the main ~default.nix~ which just imports the generated
home-manager config.

#+begin_src nix :tangle default.nix
{ ...
}:

{
  imports = [ ./generated/home-manager-config.nix ];
}
#+end_src

There are also some useful functions I may use through the config,
those are specified at the very bottom of this file, [[*Useful functions][here]].

* Home manager
** Config

This is the actual main config, which imports the selected
configurations for each package, like alacritty, zsh, nvim, etc.

#+begin_src nix :tangle generated/home-manager-config.nix
# Auto-generated from "home-manager.org"
{ pkgs
, lib
, config
, ...
}:

{
  <<home.manager.setup>>

  imports = [
    # <<alacritty.imports>>
    <<common-lisp.imports>>
    <<eclipse.imports>>
    <<emacs.imports>>
    <<email.imports>>
    <<eww.imports>>
    <<discord.imports>>
    <<firefox.imports>>
    <<fonts.imports>>
    <<git.imports>>
    <<gpg.imports>>
    <<gtk.imports>>
    <<java.imports>>
    # <<koreader.imports>>
    <<neovim.imports>>
    <<plantuml.imports>>
    <<python.imports>>
    <<qt.imports>>
    <<ssh.imports>>
    <<starship-imports>>
    <<swappy-imports>>
    <<sway-imports>>
    <<swaylock-imports>>
    <<termusic.imports>>
    <<user.imports>>
    <<waybar-imports>>
    <<wezterm.imports>>
    <<wofi-imports>>
    <<xdg-imports>>
    <<zsh-imports>>
  ];
}
#+end_src

** Setup

Home manager setup, which actually just enables home-manager and sets
its version.
*TODO: Learn nix flakes and use that*

#+NAME: home.manager.setup
#+begin_src nix
programs.home-manager.enable = true;
home.stateVersion = "22.05";
#+end_src

* Alacritty

Select the stuff to import:

#+NAME: alacritty.imports
#+begin_src nix
{
  <<alacritty.config>>
  <<alacritty.enable>>
}
#+end_src

** Config

I have separated the config in diferent chunks for better
organization:

#+NAME: alacritty.config
#+begin_src nix
programs.alacritty.settings = {
  window = {
    <<alacritty.config.window>>
  };

  scrolling = {
    <<alacritty.config.scrolling>>
  };

  font = {
    <<alacritty.config.fonts>>
  };

  colors = {
    <<alacritty.config.colors>>
  };

  cursor = {
    <<alacritty.config.cursor>>
  };

  mouse = {
    <<alacritty.config.mouse>>
  };

  key_bindings = [
    <<alacritty.config.bindings.keys>>
  ];

  mouse_bindings = [
    <<alacritty.config.bindings.mouse>>
  ];

  <<alacritty.config.others>>
};
#+end_src

*** Window

*TODO: Actually use dynamic title (configuring starship I think you
can, or with zsh).*

#+NAME: alacritty.config.window
#+begin_src nix
opacity = 0.8;
title = "Alacritty";
dynamic_title = true;

padding = {
  x = 5;
  y = 5;
};

class = {
  instance = "Alacritty";
  general = "Alacritty";
};
#+end_src

*** Scrolling

Nix' switch generations uses a lot of output.

#+NAME: alacritty.config.scrolling
#+begin_src nix
history = 10000;
multiplier = 4;
#+end_src

*** Fonts

I like Iosevka.

#+NAME: alacritty.config.fonts
#+begin_src nix
size = 12.0;

normal = {
  family = "Iosevka";
  style = "Medium";
};

bold = {
  family = "Iosevka";
  style = "Bold";
};

italic = {
  family = "Iosevka";
  style = "Italic";
};

bold_italic = {
  family = "Iosevka";
  style = "Bold Italic";
};
#+end_src

*** Colors

I like gruvbox.

#+NAME: alacritty.config.colors
#+begin_src nix
primary = {
  background = "0x1d2021";
  foreground = "0xebdbb2";
};

normal = {
  black =   "0x282828";
  red =     "0xcc241d";
  green =   "0x98971a";
  yellow =  "0xd79921";
  blue =    "0x458588";
  magenta = "0xb16286";
  cyan =    "0x689d6a";
  white =   "0xa89984";
};

bright = {
  black =   "0x928374";
  red =     "0xfb4934";
  green =   "0xb8bb26";
  yellow =  "0xfabd2f";
  blue =    "0x83a598";
  magenta = "0xd3869b";
  cyan =    "0x8ec07c";
  white =   "0xebdbb2";
};
#+end_src

*** Cursor

Do not blink, but if you did each second should do.

#+NAME: alacritty.config.cursor
#+begin_src nix
blink_interval = 1000;
unfocused_hollow = false;
thickness = 1;

style = {
  shape = "Block";
  blinking = "Never";
};
#+end_src

*** Mouse

When I need my mouse (rarely) I cant find it.

#+NAME: alacritty.config.mouse
#+begin_src nix
hide_when_typing = false;
# hints.launcher.program = "";
#+end_src

*** Bindings
**** Keys

Heresy not to have ~C-S-v~ and ~C-S-c~ to copy and paste.

#+NAME: alacritty.config.bindings.keys
#+begin_src nix
{ mods = "Control";       key = "L"; action = "ClearLogNotice"; }
{ mods = "Control|Shift"; key = "V"; action = "Paste"; }
{ mods = "Control|Shift"; key = "C"; action = "Copy"; }
#+end_src

**** Mouse

If ya lazy to ~C-S-v~, use ~mouse-3~.

#+NAME: alacritty.config.bindings.mouse
#+begin_src nix
{ mouse = "Middle"; action = "PasteSelection"; }
#+end_src

*** Others

#+NAME: alacritty.config.others
#+begin_src nix
live_config_reload = true;
working_directory = "None";
draw_bold_text_with_bright_colors = true;
#+end_src

** Enable

#+NAME: alacritty.enable
#+begin_src nix
programs.alacritty.enable = true;
#+end_src

* Common Lisp

Select the stuff to import:

#+NAME: common-lisp.imports
#+begin_src nix
{
  <<common-lisp.packages>>
  <<common-lisp.session-variables>>
  <<common-lisp.symlinked-files>>
}
#+end_src

** Config
*** Sbclrc

Sbcl init file:

#+begin_src lisp :tangle generated/sbcl-config-init.lisp
#-quicklisp
(let ((ql-init
        (merge-pathnames "setup.lisp"
                         (concatenate 'string
                                      (sb-ext:posix-getenv "NIX_QUICKLISP_DIR")
                                      "/"))))
  (when (probe-file ql-init)
    (load ql-init)))

(setf sb-impl::*default-external-format* :utf-8)
#+end_src

*** Common Lisp registry

#+begin_src conf :tangle generated/asdf-config.conf
(:tree "/GitRepos/common-lisp/")
#+end_src

** Packages

#+NAME: common-lisp.packages
#+begin_src nix
home.packages = with pkgs; [
  sbcl
  lispPackages.quicklisp
  lispPackages.asdf
];
#+end_src

** Session Variables

*TODO: Better xdg config to set this in a better way*.

#+NAME: common-lisp.session-variables
#+begin_src nix
home.sessionVariables = {
  NIX_QUICKLISP_DIR = "${config.home.homeDirectory}/.dotfiles/local/quicklisp";
};
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: common-lisp.symlinked-files
#+begin_src nix
home.file = {
  ".sbclrc".source = ./sbcl-config-init.lisp;
};

xdg.configFile =
  let cl-registry = "common-lisp/source-registry.conf.d";
  in {
    "${cl-registry}/asdf.conf".source = ./asdf-config.conf;
  };
#+end_src

* Eclipse

Select the stuff to import:

#+NAME: eclipse.imports
#+begin_src nix
{
  <<eclipse.config>>
  <<eclipse.enable>>
}
#+end_src

** Config

Not much config possible for eclipse, just the package to use:

#+NAME: eclipse.config
#+begin_src nix
programs.eclipse = {
  package = pkgs.eclipses.eclipse-java;
  plugins = with pkgs.eclipses.plugins; [
    vrapper
  ];
};
#+end_src

** Enable

#+NAME: eclipse.enable
#+begin_src nix
programs.eclipse.enable = true;
#+end_src

* Emacs

Select the stuff to import:

#+NAME: emacs.imports
#+begin_src nix
{
  <<emacs.config>>
  <<emacs.enable>>
  <<emacs.overlays>>
  <<emacs.overrides>>
  <<emacs.packages>>
  <<emacs.symlinked-files>>
}
#+end_src

** Config

The config is separated in diferent chunks:

#+NAME: emacs.config
#+begin_src nix
programs.emacs = {
  package = pkgs.emacsPgtk;
};
#+end_src

Here is the emacs config, also seperated in chunks:

#+begin_src lisp :tangle generated/emacs-config.el
<<emacs.config.user-data>>
<<emacs.config.ui>>
<<emacs.config.keybindings>>
<<emacs.config.org>>
<<emacs.config.email>>
<<emacs.config.development>>
<<emacs.config.others>>
#+end_src

*** User data
:PROPERTIES:
:header-args: :noweb-ref emacs.config.user-data
:END:

#+begin_src emacs-lisp
(setq user-full-name    "Alberto Robles Gomez"
      user-mail-address "aru_hackZ.official@zohomail.eu")
#+end_src

*** UI
:PROPERTIES:
:header-args: :noweb-ref emacs.config.ui
:END:
**** Basic config

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
#+end_src

**** Column numbers

By default column number will be enabled in all buffers but
~org-mode~, ~term-mode~ and ~shell-mode~ won't do so.

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                slime-repl-mode-hook
                treemacs-mode-hook
                mu4e-main-mode-hook
                mu4e-headers-mode-hook
                mu4e-view-mode-hook
                mu4e-compose-mode-hook
                mu4e-org-mode-hook
                mu4e~update-mail-mode-hook
                mu4e-loading-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

**** Startup

#+begin_src emacs-lisp
(custom-set-variables
 '(inhibit-startup-screen t)
 '(initial-buffer-choice t))
#+end_src

**** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka" :height 120)
(set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 120)
(set-face-attribute 'variable-pitch nil :font "Iosevka" :height 120)
#+end_src

**** Theme

#+begin_src emacs-lisp
(load-theme 'gruvbox-dark-hard t)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
gruvbox-theme
#+end_src

**** Ivy

#+begin_src emacs-lisp
(ivy-mode 1)
(ivy-rich-mode 1)
#+end_src

***** Theming

#+begin_src emacs-lisp
(all-the-icons-ivy-rich-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
ivy
lsp-ivy
ivy-rich
all-the-icons-ivy-rich
#+end_src

**** Counsel

#+begin_src emacs-lisp
(counsel-mode 1)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
counsel
#+end_src

**** All the icons

Getting those juicy icons

#+begin_src emacs-lisp
(require 'all-the-icons)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
all-the-icons
#+end_src

**** Doom modeline
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
doom-modeline
#+end_src

***** Basic config

#+begin_src emacs-lisp
(doom-modeline-mode 1)
#+end_src

#+begin_src emacs-lisp
(setq doom-modeline-height 30)
#+end_src

**** Svg Tags
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
svg-tag-mode
#+end_src

***** Basic config

#+begin_src emacs-lisp
(require 'svg-tag-mode)
#+end_src

#+begin_src emacs-lisp
(setq svg-tag-tags
      '((":TODO:" . aru/org-svg-tag-todo)
        ("#\\+[a-zA-Z]+:" . aru/org-svg-tag-settings)))
#+end_src

***** Custom faces
****** Org

#+begin_src emacs-lisp
(defface aru/face-org-svg-tag-todo
  '((t :foreground "#98971a"
       :background "#282828"
       :box        (:line-width 1 :color "#98971a" :style nil)
       :weight     bold
       :family     unspecified
       :inherit    default))
  "Face for todo svg tags"
  :group nil)

(defface aru/face-org-svg-tag-settings
  '((t :foreground "#7c6f64"
       :background "#282828"
       :box        (:line-width 1 :color "#7c6f64" :style nil)
       :weight     bold
       :family     unspecified
       :inherit    default))
  "Face for title svg tags"
  :group nil)
#+end_src

***** Custom tags
****** Org

#+begin_src emacs-lisp
; (setq aru/org-svg-tag-todo
;       (svg-tag-make "TODO" 'aru/face-org-svg-tag-todo 2 0 5))

; (defun aru/org-svg-tag-settings (text)
;   (svg-tag-make (substring text 2 -1) 'aru/face-org-svg-tag-settings 2 0 5))
#+end_src

**** Which key

#+begin_src emacs-lisp
(setq which-key-idle-delay .5)
(which-key-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
which-key
#+end_src

**** Rainbow delimiters
***** Hooks

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
rainbow-delimiters
#+end_src

**** Diff
***** Basic config

#+begin_src emacs-lisp
(defun aru/diff-faces ()
  (set-face-attribute 'diff-refine-removed nil
		      :background "#252122"
		      :foreground "#fb4934")
  (set-face-attribute 'diff-refine-added nil
		      :background "#212421"
		      :foreground "#98971a"))
#+end_src

*** Keybindings
:PROPERTIES:
:header-args: :noweb-ref emacs.config.keybindings
:END:
**** Random stuff

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

Make emacs recognize ~_~ as part of a word:

#+begin_src emacs-lisp
(modify-syntax-entry ?_ "w")
#+end_src

**** Evil

So evil-collection works:

#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
#+end_src

Activating evil mode:

#+begin_src emacs-lisp
(evil-mode 1)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
evil
#+end_src

**** Evil collection

#+begin_src emacs-lisp
(evil-collection-init)

(setq evil-collection-outline-bind-tab-p t
      evil-collection-calendar-want-org-bindings t
      evil-collection-setup-minibuffer t)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
evil-collection
#+end_src

**** General

#+begin_src emacs-lisp
(setq general-override-states '(insert
                                emacs
                                hybrid
                                normal
                                visual
                                motion
                                operator
                                replace))
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :states '(normal visual motion)
 :keymaps 'override
 :prefix "SPC"
 :non-normal-prefix "M-<return>"

 ; Treemacs
 "t" '(:ignore t :which-key "Treemacs")

 "t t" '(treemacs :which-key "Toggle treemacs sidebar")

 ; Buffer
 "b" '(:ignore t :which-key "Buffer")

 "b <right>" '(switch-to-next-buffer :which-key "Next")
 "b <left>" '(switch-to-prev-buffer :which-key "Previous")
 "b s" '(switch-to-buffer :which-key "Select")
 "b w" '(switch-to-buffer-other-window :which-key "Select to other window")

 "b k" '(:ignore t :which-key "Kill")
 "b k o" '(kill-buffer :which-key "Other")
 "b k f" '(kill-current-buffer :which-key "Focused")

 ; Window
 "w" '(:ignore t :which-key "Window")

 "w <up>" '(windmove-up :which-key "Top")
 "w <right>" '(windmove-right :which-key "Right")
 "w <down>" '(windmove-down :which-key "Bottom")
 "w <left>" '(windmove-left :which-key "Left")

 "w s" '(:ignore t :which-key "Split")
 "w s <right>" '(split-window-right :which-key "Right")
 "w s <down>" '(split-window-below :which-key "Below")

 "w d" '(:ignore t :which-key "Delete")
 "w d o" '(delete-other-window :which-key "Other")
 "w d f" '(delete-window :which-key "Focused")
 "w d <up>" '(windmove-delete-up :which-key "Top")
 "w d <right>" '(windmove-delete-right :which-key "Right")
 "w d <down>" '(windmove-delete-down :which-key "Bottom")
 "w d <left>" '(windmove-delete-left :which-key "Left")

 ; Web server
 "C-w" '(:ignore t :which-key "Web server")
 "C-w o" '(aru/web-server-open :which-key "Open web server")
 "C-w k" '(aru/web-server-kill :which-key "Kill current web server")

 ; Magit
 "m" '(magit :which-key "Magit")

 ; Mu4e (Email)
 "e" '(mu4e :which-key "Mu4e"))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
general
#+end_src

*** Org
:PROPERTIES:
:header-args: :noweb-ref emacs.config.org
:END:
**** Basic config

#+begin_src emacs-lisp
(setq org-directory "~/Archive/Org/"

      org-ellipsis " ▾"

      org-priority-default 5
      org-priority-highest 1
      org-priority-lowest 5

      org-startup-folded t
      org-startup-indented t

      org-edit-src-content-indentation 0

      org-todo-keywords '((sequencep "TODO(t)"
                                     "NEXT(n)"
                                     "|"
                                     "DONE(d)"
                                     "CANCELED(x)"))

      org-fancy-priorities-list '((?1 . "➀")
                                  (?2 . "➁")
                                  (?3 . "➂")
                                  (?4 . "➃")
                                  (?5 . "➄"))

      org-priority-faces '((?1 . (:foreground "#cc241d" :weight extrabold))
                           (?2 . (:foreground "#d65d0e" :weight bold))
                           (?3 . (:foreground "#d79921" :weight semibold))
                           (?4 . (:foreground "#98971a"))
                           (?5 . (:foreground "#689d6a"))))
#+end_src

**** UI tweaks
***** Visual fill

Making org buffers display on the center of the available space

#+begin_src emacs-lisp
(defun aru/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+end_src

****** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
visual-fill-column
#+end_src

**** Agenda

Not in use right now, copying my old config, I should start using it
again tho.

***** Basic config

#+begin_src emacs-lisp
(setq org-agenda-fontify-priorities t
      org-agenda-hide-tags-regexp "."

      org-agenda-files '("~/Archive/Org/inbox.org"
                         "~/Archive/Org/agenda.org"
                         "~/Archive/Org/notes.org"
                         "~/Archive/Org/projects.org")

      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))

      org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags-todo "projects"
                     ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'nottodo '("TODO")))
                      (org-agenda-overriding-header "\nProjects\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-prefix-format " % i%-16 c% s[%e]: ")
                 (org-agenda-overriding-header "\nCompleted today\n")))))
        ("d" "Deadlines"
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'nottode '("NEXT")))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-overriding-header "\nDeadlines\n"))))))
#+end_src

***** Advices

#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before
            (lambda (&rest _)
              (org-save-all-org-buffers)))
#+end_src

**** Capture
***** Basic config

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file "~/Archive/Org/inbox.org")
         "* TODO %?\n/Entered on/ %U")
        ("m" "Meeting" entry (file+headline "~/Archive/Org/agenda.org" "Future")
         "* %? :meeting:\n<%<%Y-%m-%d %a %H:00>>")
        ("n" "Note" entry (file "~/Archive/Org/notes.org")
         "* NOTE (%a)\n/Entered on/ %U/n/n%?")
        ("@" "Inbox [mu4e]" entry (file "~/Archive/Org/inbox.org")
         "* TODO Reply to \"%a\" %?\n/Entered on/ %U")))
#+end_src

**** Refile
***** Basic config

#+begin_src emacs-lisp
(setq org-refile-targets '(("~/Documents/ORG/projects.org"
                      :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
#+end_src

***** Advices

#+begin_src emacs-lisp
(advice-add 'org-refile :before
            (lambda (&rest _)
              (org-save-all-org-buffers)))
#+end_src

**** Log
***** Basic config

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

***** Functions

#+begin_src emacs-lisp
(defun aru/log-todo-next-creation-date (&rest _)
  "Log NEXT creation time inthe property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d %H:%M]"))))
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'org-after-todo-state-change-hook #'aru/log-todo-next-creation-date)
#+end_src

**** Publish
***** HTML
****** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
htmlize
#+end_src

****** Basic config

#+begin_src emacs-lisp
(setq org-html-head-include-default-style nil
      org-html-htmlize-output-type 'css
      org-html-html5-fancy t
      org-html-doctype "html5"
      org-export-allow-bind-keywords t)
#+end_src

****** Project list

#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("S1DAM - Notes" :components ("S1DAM_Notes.org" "S1DAM_Notes.static"))
        ("S1DAM_Notes.org"
         :headline-levels 6
         :recursive t
         :base-extension "org"
         :base-directory "/GitRepos/s1dam-azarquiel-2021/aru-notas-practicas/docs.org/"
         :publishing-directory "/GitRepos/s1dam-azarquiel-2021/aru-notas-practicas/docs/"
         :publishing-function org-html-publish-to-html)
        ("S1DAM_Notes.static"
         :recursive t
         :base-extension "css\\|png\\|jpg\\|jpeg\\|eot\\|woff2\\|woff\\|ttf\\|svg"
         :base-directory "/GitRepos/s1dam-azarquiel-2021/aru-notas-practicas/docs.org/"
         :publishing-directory "/GitRepos/s1dam-azarquiel-2021/aru-notas-practicas/docs/"
         :publishing-function org-publish-attachment)))
#+end_src

****** Modified export functions
******* Removing cells and rows from org tables

When using org tables, I like to remove some columns I may use to
declare functions or values not needed when exported, just for
calculations or that stuff. And thats what this function does

The rows with its first cell marked with a ~<_>~ and columns marked
with a ~<~>~ are searched and removed at export (the original file
isn't overwritten).

#+begin_src emacs-lisp
(defun aru/org-export-delete-special-cols-n-rows (back-end)
   (while (re-search-forward "^[ \t]*| +\\(<_>\\) +|" nil t)
          (goto-char (match-beginning 1))
          (org-table-kill-row)
          (beginning-of-line))
   (beginning-of-buffer)
   (while (re-search-forward "| +\\(<~>\\) +|" nil t)
          (goto-char (match-beginning 1))
          (org-table-delete-column)
          (beginning-of-line)))
#+end_src

******* Remove empty table cells and make its siblings expand

This is still in WIP, no idea how to add the atributte ~rowspan~ or
~collspan~ to the sibling cells.

#+begin_src emacs-lisp
(defun org-html-table-cell (table-cell contents info)
  (let* ((table-cell-address (org-export-table-cell-address table-cell info))
         (table-row (org-export-get-parent table-cell))
         (table (org-export-get-parent-table table-cell))
         (cell-attrs
           (if (not (plist-get info :html-table-align-individual-fields))
               ""
               (format (if (and (boundp 'org-html-format-table-no-css)
                                org-html-format-table-no-css)
                           " align=\"%s\""
                           " class=\"org-%s\"")
                       (org-export-table-cell-alignment table-cell info)))))
    (cond
      ((or (not contents)
           (string= "" (org-trim contents)))
       "")
      ((and (org-export-table-has-header-p table info)
            (= 1 (org-export-table-row-group table-row info)))
       (let ((header-tags (plist-get info :html-table-header-tags)))
         (concat "\n"
                 (format (car header-tags) "col" cell-attrs)
                 contents
                 (cdr header-tags))))
      ((and (plist-get info :html-table-use-header-tags-for-first-column)
            (zerop (cdr (org-export-table-cell-address table-cell info))))
       (let ((header-tags (plist-get info :html-table-header-tags)))
         (concat "\n"
                 (format (car header-tags) "row" cell-attrs)
                 contents
                 (cdr header-tags))))
      (t
       (let ((data-tags (plist-get info :html-table-data-tags)))
         (concat "\n"
                 (format (car data-tags) cell-attrs)
                 contents
                 (cdr data-tags)))))))
#+end_src

****** Hooks

#+begin_src emacs-lisp
(add-hook 'org-export-before-processing-hook
          #'aru/org-export-delete-special-cols-n-rows)
#+end_src

**** Faces

#+begin_src emacs-lisp
(defun aru/org-faces ()
  (dolist (face '((org-document-title . 1.5)
                  (org-level-1 . 1.4)
                  (org-level-2 . 1.25)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.05)
                  (org-level-7 . 1.05)))
    (set-face-attribute (car face) nil :font "Iosevka" :height (cdr face))))
#+end_src

**** Superstar
***** Basic config

#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("◉" "◈" "⬠" "⬡" "○"))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
org-superstar
#+end_src

**** Hooks

#+begin_src emacs-lisp
(defun aru/org-hook ()
  (set-face-attribute 'org-ellipsis nil :underline nil)
  (org-superstar-mode 1)
  (turn-on-auto-fill)
  (aru/org-faces)
  (aru/org-mode-visual-fill)
  (aru/org-plantuml-mode-hook)
  (aru/org-shell-mode-hook))
#+end_src

#+begin_src emacs-lisp
(defun aru/org-src-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'aru/org-hook)
(add-hook 'org-src-mode-hook #'aru/org-src-hook)
#+end_src

**** Plantuml
***** Basic config

#+begin_src emacs-lisp
(defun aru/org-plantuml-mode-hook ()
  (setq org-plantuml-executable-path (getenv "PLANTUML_BIN"))
  (setq org-plantuml-exec-mode 'plantuml)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))

(setq plantuml-executable-path (getenv "PLANTUML_BIN"))
(setq plantuml-default-exec-mode 'executable)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
plantuml-mode
#+end_src

**** Shell
***** Basic config

#+begin_src emacs-lisp
(defun aru/org-shell-mode-hook ()
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
#+end_src

*** Email
:PROPERTIES:
:header-args: :noweb-ref emacs.config.email
:END:
**** Basic config

First time I needed to add this ...

#+begin_src emacs-lisp
(require 'mu4e)
#+end_src

Also autostart pinentry (I need it also for git):

#+begin_src emacs-lisp
(pinentry-start)
#+end_src

I would like if this was auto generated in some way from the nix
config:

#+begin_src emacs-lisp
(setq mu4e-refile-folder "/Archive"
      mu4e-drafts-folder "/Drafts"
      mu4e-sent-folder "/Sent"
      mu4e-trash-folder "/Trash"
      mu4e-attachment-dir
      (concat
       (shell-command-to-string
        "echo $(xdg-user-dir MAIL) | awk '{printf(\"%s\", $0);}'")
       "/aru/Attachments")
      mu4e-compose-signature "Alberto (a.k.a. aru)"
      mu4e-compose-signature-auto-include t
      mu4e-use-fancy-chars t
      mu4e-get-mail-command "mbsync aru"
      mu4e-update-interval 60
      mu4e-sent-messages-behavior 'sent

      mail-user-agent 'mu4e-user-agent

      message-send-mail-function 'smtpmail-send-it)
#+end_src

**** SMTP config

#+begin_src emacs-lisp
(setq smtpmail-smtp-server "smtp.zoho.eu"
      smtpmail-smtp-service 465
      smtpmail-smtp-user "aru_hackZ.official@zohomail.eu"
      smtpmail-stream-type 'ssl)
#+end_src

**** Auth config

Setting up the auth store:

#+begin_src emacs-lisp
(auth-source-pass-enable)

(setq auth-source-debug t
      auth-source-do-cache nil
      auth-sources '(password-store)
      auth-source-pass-filename
      (shell-command-to-string
       "echo $(xdg-user-dir KEYS) | awk '{printf(\"%s\", $0);}'"))
#+end_src

With that you can create folders in ~XDG_KEYS_HOME~ named with the
server and inside place gpg files named after the username of the SMTP
server with the password. In my case it would be
~smtp.zoho.eu/aru_hackZ.official@zohomail.eu.gpg~.

**** MML config

Using some gpg key as default

#+begin_src emacs-lisp
(setq mml-secure-key-preferences
      '((OpenPGP
         (sign ("aru_hackZ.official@zohomail.eu"
                "D7D93ECFDA731BE3159F6BD93A581BDE765C0DFA"))
         (encrypt ("aru_hackZ.official@zohomail.eu"
                   "D7D93ECFDA731BE3159F6BD93A581BDE765C0DFA"))))
      mml-secure-openpgp-sign-with-sender t)
#+end_src

**** Notifications

I will be using ~mu4e-alert~ for this.

***** Basic config

Using libnotify

#+begin_src emacs-lisp
(mu4e-alert-set-default-style 'libnotify)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+end_src

**** Hooks

#+begin_src emacs-lisp
(add-hook 'message-send-hook #'mml-secure-message-sign-pgpmime)
#+end_src

**** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
# To make sure that mu is in load-path, since it seems there are people
# reporting it doesn't appear in their's, no problem in mine tho
pkgs.mu

mu4e-alert
pinentry
#+end_src

*** Development
:PROPERTIES:
:header-args: :noweb-ref emacs.config.development
:END:
**** LSP
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lsp-mode
lsp-ui
#+end_src

#+begin_src nix :noweb-ref emacs.packages+
nodePackages.vscode-css-languageserver-bin
nodePackages.vscode-html-languageserver-bin
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'lsp-ui-mode)
(add-hook 'lsp-mode-hook #'flycheck-mode)
#+end_src

**** Dap
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
dap-mode
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'dap-mode)
#+end_src

**** Flycheck

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
flycheck
#+end_src

**** Treemacs
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
treemacs
lsp-treemacs
treemacs-all-the-icons
#+end_src

***** Basic config

#+begin_src emacs-lisp
(lsp-treemacs-sync-mode 1)
#+end_src

***** Theming

Making it use all-the-icons instead of default icons.

#+begin_src emacs-lisp
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")
#+end_src

**** Dired
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
all-the-icons-dired
#+end_src

***** Theming

Making dired use all-the-icons too!

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
#+end_src

**** Projectile
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
projectile
#+end_src

***** Basic config

#+begin_src emacs-lisp
(projectile-mode +1)
#+end_src

**** Web mode
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
web-mode
#+end_src

***** Auto modes

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.nix?\\'" . nix-mode))
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/web-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        2)
  (web-mode-use-tabs)
  (global-set-key (kbd "C-SPC") 'emmet-expand-line)
  (add-hook 'after-save-hook #'aru/scss-compile-maybe))
#+end_src

#+begin_src emacs-lisp
(add-hook 'web-mode-hook #'lsp)
(add-hook 'web-mode-hook #'emmet-mode)
(add-hook 'web-mode-hook #'aru/web-mode-hook)
#+end_src

**** Scss
***** Basic config

Adding scss to lsp languages (giving it an id/name):

#+begin_src emacs-lisp
(add-to-list 'lsp-language-id-configuration '(".*\\.scss" . "scss"))
#+end_src

***** Functions

Default variables:

#+begin_src emacs-lisp
(defcustom aru/do-compile-scss t
  "Wanna compile scss?"
  :type 'boolean)

(defcustom aru/scss-sass-options '()
  "Scss compile options"
  :type '(repeat string))

(defcustom aru/scss-output-directory nil
  "Output directory for compiled files"
  :type '(choice (const :tag "Same dir" nil)
                 (string :tag "Relative dir")))
#+end_src

Scss compile function:

#+begin_src emacs-lisp
(defun aru/scss-compile ()
  (interactive)
  (compile (concat "sass"
                   " "
                   (mapconcat 'identity aru/scss-sass-options " ")
                   " --update "
                   (when (string-match ".*/" buffer-file-name)
                     (concat "'" (match-string 0 buffer-file-name) "'"))
                   (when aru/scss-output-directory
                     (concat ":'" aru/scss-output-directory "'")))))
#+end_src

Check if the file is a scss file:
**TODO: Make a scss mode for an easier way to do this*

#+begin_src emacs-lisp
(defun aru/is-scss-file ()
  (interactive)
  (if (string=
       (file-name-extension (buffer-file-name (window-buffer (minibuffer-selected-window))))
       "scss")
      t nil))
#+end_src

If it's a scss file, compile unless it was declared not to do so.

#+begin_src emacs-lisp
(defun aru/scss-compile-maybe ()
  (if (and (aru/is-scss-file)
           aru/do-compile-scss)
      (aru/scss-compile)))
#+end_src

**** Emmet
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
emmet-mode
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/emmet-mode-hook ()
  (setq emmet-self-closing-tag-style " /"
        emmet-move-cursor-between-quotes t))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emmet-mode-hook #'aru/emmet-mode-hook)
#+end_src

**** Java
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lsp-java
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/java-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        4))
#+end_src

#+begin_src emacs-lisp
(add-hook 'java-mode-hook #'lsp)
(add-hook 'java-mode-hook #'aru/java-mode-hook)
#+end_src

**** Lua
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lua-mode
company-lua
#+end_src

***** Basic config

#+begin_src emacs-lisp
(setq lua-indent-level 4)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/lua-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'lua-mode-hook #'aru/lua-mode-hook)
#+end_src

**** Elisp
***** Hooks
#+begin_src emacs-lisp
(defun aru/elisp-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aru/elisp-mode-hook)
#+end_src

**** Lisp
***** Hooks

#+begin_src emacs-lisp
(defun aru/lisp-mode-hook ()
  (setq indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook #'aru/lisp-mode-hook)
#+end_src

**** Nix
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
nix-mode
#+end_src

**** Magit
***** Basic config

#+begin_src emacs-lisp
(setq magit-diff-highlight-trailing t
      magit-diff-paint-whitespace t
      magit-diff-refine-ignore-whitespace nil
      magit-diff-refine-hunk 'all)
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
magit
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'magit-mode-hook #'aru/diff-faces)
#+end_src

**** Company
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
company
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-company-mode)
#+end_src

**** Slime
***** Basic config

#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
slime
slime-company
#+end_src

**** Yasnippet
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
yasnippet
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'yas-global-mode)
#+end_src

**** Yaml
***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
yaml-mode
#+end_src

**** Lispy
***** Basic config

#+begin_src emacs-lisp
(defun aru/check-closing-paren ()
  (interactive "*")
  (if (= (char-after) ?\))
      (forward-char)
    (insert ")")))
#+end_src

***** Keybindings

#+begin_src emacs-lisp
(general-define-key
 :states '(insert)
 :keymaps '(lisp-mode-map emacs-lisp-mode-map)
 "(" 'lispy-parens
 ")" 'aru/check-closing-paren)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
#+end_src

***** Packages

#+begin_src nix :noweb-ref emacs.extra-packages+
lispy
#+end_src

**** Nxml
***** Basic config

Tag folding:

#+begin_src emacs-lisp
(require 'hideshow)
(require 'sgml-mode)
(require 'nxml-mode)

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))

(add-hook 'nxml-mode-hook 'hs-minor-mode)

;; optional key bindings, easier than hs defaults
(define-key nxml-mode-map (kbd "C-c C-f") 'hs-toggle-hiding)
#+end_src

#+begin_src emacs-lisp
(setq nxml-attribute-indent 2)
#+end_src

***** Hooks

#+begin_src emacs-lisp
(defun aru/nxml-mode-hook ()
  (setq indent-tabs-mode t
        tab-width        2)
  (global-set-key (kbd "C-SPC") #'emmet-expand-line))
#+end_src

#+begin_src emacs-lisp
(add-hook 'nxml-mode-hook #'aru/nxml-mode-hook)
(add-hook 'nxml-mode-hook #'lsp)
(add-hook 'nxml-mode-hook #'emmet-mode)
#+end_src

**** Web server

#+begin_src emacs-lisp
(defvar *aru/web-server-ports-opened* '())
(defvar *aru/web-server-port-default* 8000)

(defun aru/web-server-add-opened-port (name port)
  (push (cons name port) *aru/web-server-ports-opened*))

(defun aru/web-server-remove-opened-port (name)
  (let ((name-port-cons (assoc name *aru/web-server-ports-opened*)))
    (setq *aru/web-server-ports-opened*
          (delq name-port-cons *aru/web-server-ports-opened*))
    (cdr name-port-cons)))

(defun aru/web-server-get-new-port ()
  (require 'dash)
  (if (length= *aru/web-server-ports-opened* 0)
      *aru/web-server-port-default*
    (1+ (cdr (--max-by (> (cdr it) (cdr other))
                       *aru/web-server-ports-opened*)))))

(defun aru/web-server-get-name ()
  (format "web-server-%s" (projectile-project-name)))

(defun aru/web-server-open ()
  (interactive)
  (let ((name (aru/web-server-get-name)))
    (if (get-process name)
        (message "Web server already started in this project.")
      (aru/web-server--open name))))

(defun aru/web-server--open (name)
  (let* ((port (aru/web-server-get-new-port))
         (cmd (format "python3 -m http.server --directory %s %d"
                     (projectile-project-root)
                     port))
         (buffer-name (format "*%s*" name)))
    (start-process-shell-command name buffer-name cmd)
    (aru/web-server-add-opened-port name port)
    (message "Web server started on port %d" port)))

(defun aru/web-server-kill ()
  (interactive)
  (let* ((name (aru/web-server-get-name))
         (process (get-process name)))
    (if process
        (aru/web-server--kill process name)
      (message "Can't stop what isn't started."))))

(defun aru/web-server--kill (process name)
  (delete-process process)
  (message "Web server on port %d closed."
           (aru/web-server-remove-opened-port name)))
#+end_src

*** Others
:PROPERTIES:
:header-args: :noweb-ref emacs.config.others
:END:

#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(concat (getenv "XDG_CONFIG_HOME") "/emacs/backup/")))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

** Enable

#+NAME: emacs.enable
#+begin_src nix
programs.emacs.enable = true;
#+end_src

** Overlays

Using emacs pure gtk package since I'm using wayland.

#+NAME: emacs.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<emacs.overlays.emacs-nixpkgs>>
  )
];
#+end_src

*** Emacs nixpkgs

#+NAME: emacs.overlays.emacs-nixpkgs
#+begin_src nix
let
  repo = "https://github.com/nix-community/emacs-overlay";
  commit = "db771cf7f62799cf46abb9847c28f69630ad74fe";
in import (builtins.fetchTarball {
  url = "${repo}/archive/${commit}.tar.gz";
})
#+end_src

** Overrides

Override org package to use elpa instead of builtin

#+NAME: emacs.overrides
#+begin_src nix
programs.emacs.overrides = self: super: {
  org = self.elpaPackages.org;
};
#+end_src

** Packages

#+NAME: emacs.packages
#+begin_src nix
home.packages = with pkgs; [
  <<emacs.packages+>>
];

programs.emacs.extraPackages = (epkgs: with epkgs; [
  <<emacs.extra-packages+>>
]);
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: emacs.symlinked-files
#+begin_src nix
xdg.configFile = {
  "emacs/init.el".source = ./emacs-config.el;
};
#+end_src

* Email

Select the stuff to import:

#+NAME: email.imports
#+begin_src nix
{
  <<email.config>>
  <<email.enable>>
}
#+end_src

** Config

My email config uses the ~XDG_MAIL_DIR~ as mail home, which is defined
under the xdg config.

#+NAME: email.config
#+begin_src nix
# services.mbsync = {
#   enable = true;
#   frequency = "*-*-* *:*:00";
#   postExec = "${pkgs.mu}/bin/mu index";
# };

accounts.email = {
  maildirBasePath =
    let mailHome =
          builtins.elemAt
            (builtins.split
              "\\$HOME/"
              config.xdg.userDirs.extraConfig.XDG_MAIL_DIR)
            2;
    in mailHome;
  accounts = {
    aru =
      <<email.config.aru>>
  };
};
#+end_src

*** Aru's config

My main mail config.
*TODO: Set up a way to auto generate emacs mu4e config*

#+NAME: email.config.aru
#+begin_src nix
let email = "aru_hackZ.official@zohomail.eu";
    imapHost = "imap.zoho.eu";
in {
  address = email;
  userName = email;
  realName = "Alberto Robles Gomez";
  primary = true;
  mu.enable = true;

  passwordCommand =
    <<email.config.aru.password-command>>

  folders = {
    <<email.config.aru.folders>>
  };

  signature = {
    <<email.config.aru.signature>>
  };

  gpg = {
    <<email.config.aru.gpg>>
  };

  imap = {
    <<email.config.aru.imap>>
  };

  smtp = {
    <<email.config.aru.smtp>>
  };

  mbsync = {
    <<email.config.aru.mbsync>>
  };
};
#+end_src

**** Folders

#+NAME: email.config.aru.folders
#+begin_src nix
drafts = "Drafts";
inbox = "Inbox";
sent = "Sent";
trash = "Trash";
#+end_src

**** Gpg

#+NAME: email.config.aru.gpg
#+begin_src nix
signByDefault = true;
key = "3A581BDE765C0DFA";
#+end_src

**** Imap

#+NAME: email.config.aru.imap
#+begin_src nix
host = imapHost;
port = 993;
#+end_src

**** Mbsync

#+NAME: email.config.aru.mbsync
#+begin_src nix
enable = true;
create = "both";
expunge = "both";
#+end_src

**** Password command

#+NAME: email.config.aru.password-command
#+begin_src nix
let keysDir = config.xdg.userDirs.extraConfig.XDG_KEYS_DIR;
in "gpg --quiet --decrypt ${keysDir}/${imapHost}/${email}.gpg";
#+end_src

**** Signature

#+NAME: email.config.aru.signature
#+begin_src nix
showSignature = "append";
text = "\n------\nBy aru\n";
#+end_src

**** Smtp

#+NAME: email.config.aru.smtp
#+begin_src nix
host = "smtp.zoho.eu";
port = 465;
#+end_src

** Enable

#+NAME: email.enable
#+begin_src nix
programs.mu.enable = true;
programs.mbsync.enable = true;
#+end_src

* Eww

Select the stuff to import:

#+NAME: eww.imports
#+begin_src nix
{
  <<eww.config>>
  <<eww.overlays>>
  <<eww.packages>>
  <<eww.symlinked-files>>
}
#+end_src

** Config
*** Test config

Testing some stuff.

#+begin_src lisp :tangle generated/eww-config.yuck
(defwindow Test1
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "60%"
                      :height "60%"
                      :anchor "center")
  :stacking "bottom"
  :exclusive false
  :focusable true
  (cpu-usage))

(defwidget cpu-usage []
  (box :class "cpu-usage"
       :space-evenly true
       :halign "start"
       :valign "start"
    (circular-progress :value {EWW_CPU.avg}
                       :start-at 25
                       :width 100
                       :height 100
                       :thickness 5.0
                       :clockwise true
      (label :text "CPU"))))
#+end_src

*** Style

The css to make everything look better.

#+begin_src scss :tangle generated/eww-style.scss
/* Nothing */
#+end_src

** Overlays

Use the lattest commit in the master branch instead of lattest
release.

#+NAME: eww.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<eww.overlays.eww-wayland-master>>
  )
];
#+end_src

*** Eww wayland master

#+NAME: eww.overlays.eww-wayland-master
#+begin_src nix
self: super:
{
  eww-wayland-master = super.eww-wayland.overrideAttrs (oldAttrs: rec {
    version = "fb0e57a0149904e76fb33807a2804d4af82350de";
    src = super.fetchFromGitHub {
      owner = "elkowar";
      repo = "eww";
      rev = "${version}";
      sha256 = "sha256-oAbB9aW/nqg02peqGEfETOGgeXarI6ZcAZ6DzDXbOSE=";
    };

    cargoDeps = oldAttrs.cargoDeps.overrideAttrs (super.lib.const {
      inherit src;
      name = "eww-vendor.tar.gz";
      outputHash = "sha256-zN6qqCvFYCD3sUIqC9XZyyUVc/9zQ0UB/gRq96Gaf94=";
    });
  });
}
#+end_src

** Packages

#+NAME: eww.packages
#+begin_src nix
home.packages = with pkgs; [
  eww-wayland-master
];
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: eww.symlinked-files
#+begin_src nix
xdg.configFile = {
  "eww/eww.yuck".source = ./eww-config.yuck;
  "eww/eww.scss".source = ./eww-style.scss;
};
#+end_src

* Discord

Select the stuff to import:

#+NAME: discord.imports
#+begin_src nix
{
  <<discord.packages>>
}
#+end_src

** Packages

#+NAME: discord.packages
#+begin_src nix
nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
  "discord"
];

home.packages = with pkgs; [
  discord
];
#+end_src

* Firefox

Select the stuff to import:

#+NAME: firefox.imports
#+begin_src nix
{
  <<firefox.packages>>
}
#+end_src

** Packages

#+NAME: firefox.packages
#+begin_src nix
home.packages = with pkgs; [
  firefox
];
#+end_src

* Fonts

Select the stuff to import:

#+NAME: fonts.imports
#+begin_src nix
{
  <<fonts.packages>>
}
#+end_src

** Packages

#+NAME: fonts.packages
#+begin_src nix
home.packages = with pkgs; [
  <<fonts.packages.iosevka>>
  <<fonts.packages.noto>>
  <<fonts.packages.emacs-icons>>
];
#+end_src

*** Iosevka

#+NAME: fonts.packages.iosevka
#+begin_src nix
iosevka
(nerdfonts.override { fonts = [ "Iosevka" ]; })
#+end_src

*** Noto

#+NAME: fonts.packages.noto
#+begin_src nix
noto-fonts
noto-fonts-cjk
noto-fonts-emoji
#+end_src

*** Emacs icons

#+NAME: fonts.packages.emacs-icons
#+begin_src nix
emacs-all-the-icons-fonts
#+end_src

* Git

Select the stuff to import:

#+NAME: git.imports
#+begin_src nix
{
  <<git.config>>
  <<git.enable>>
  <<git.packages>>
}
#+end_src

** Config

Setting up git config, it is separated in minor chunks (again) for
better organization.

#+NAME: git.config
#+begin_src nix
programs.git = {
  <<git.config.user>>
  <<git.config.gpg-signing>>
  <<git.config.ignores>>
  <<git.config.extra>>
};
#+end_src

*** User

Setting both my email and username used in github.

#+NAME: git.config.user
#+begin_src nix
userEmail = config.accounts.email.accounts.aru.address;
userName = "aru-hackZ";
#+end_src

*** GPG signing

Use gpg to sign commits.

#+NAME: git.config.gpg-signing
#+begin_src nix
signing.signByDefault = true;
signing.key = "62F49107DB7386A7";
#+end_src

*** Ignores

Ignore ~<file-name>.<extension>~~ files generated from emacs.

#+NAME: git.config.ignores
#+begin_src nix
ignores = [
  "*~"
];
#+end_src

*** Extra

Setting the default branch name to be ~main~.

#+NAME: git.config.extra
#+begin_src nix
extraConfig = {
  init = {
    defaultBranch = "main";
  };
};
#+end_src

** Enable

#+NAME: git.enable
#+begin_src nix
programs.git.enable = true;
#+end_src

** Packages

#+NAME: git.packages
#+begin_src nix
home.packages = with pkgs; [
  git-crypt
];
#+end_src

* Gpg

Select the stuff to import:

#+NAME: gpg.imports
#+begin_src nix
{
  <<gpg.config>>
  <<gpg.enable>>
}
#+end_src

** Config

More config chunks!

#+NAME: gpg.config
#+begin_src nix
services.gpg-agent = {
  <<gpg.config.ssh-keys>>
  <<gpg.config.ttl>>
  <<gpg.config.pinentry>>
  <<gpg.config.extra>>
};
#+end_src

*** SSH keys

Use this gpg key as ssh identification, you can make your gpg key be
able to be used as an ssh identification by following [[https://opensource.com/article/19/4/gpg-subkeys-ssh][this article]] and
adding here your key by doing ~gpg -K --with-keygrip~ and searching
the key marked with an ~[A]~. Also you need to export the key as an
ssh key and move it to ~~/.ssh/~ with ~gpg --export-ssh-key <key>
~/.ssh/id_rsa.pub~. And finally make sure to add it to the server you
using that key with, like github.

#+NAME: gpg.config.ssh-keys
#+begin_src nix
sshKeys = [ "2DFF735B955F966CA0A33CE3EBECBBFF6EA666FF" ];
#+end_src

*** TTL

Dont ask me for a password again for 8h.

#+NAME: gpg.config.ttl
#+begin_src nix
defaultCacheTtl    = 3600 * 8;
maxCacheTtl        = 3600 * 8;
defaultCacheTtlSsh = 3600 * 8;
maxCacheTtlSsh     = 3600 * 8;
#+end_src

*** Pinentry

I use emacs, so ...

#+NAME: gpg.config.pinentry
#+begin_src nix
pinentryFlavor = "emacs";
#+end_src

*** Extra

I said I use emacs.

#+NAME: gpg.config.extra
#+begin_src nix
extraConfig =
  ''
  allow-emacs-pinentry
  '';
#+end_src

** Enable

#+NAME: gpg.enable
#+begin_src nix
programs.gpg.enable = true;
services.gpg-agent.enable = true;
services.gpg-agent.enableSshSupport = true;
#+end_src

* Gtk

Select the stuff to import:

#+NAME: gtk.imports
#+begin_src nix
{
  <<gtk.config>>
  <<gtk.enable>>
  <<gtk.symlinked-files>>
}
#+end_src

** Config

I have separated the config in diferent chunks for better
organization, and inside them I also import the package required.

Also the trolltech config goes to it's own generated file and then
symlinked to ~XDG_CONFIG_HOME~.

#+NAME: gtk.config
#+begin_src nix
gtk = {
  <<gtk.config.font>>
  <<gtk.config.theme>>
  <<gtk.config.icon-theme>>
};
#+end_src

*** Font

Iosevka everywhere.

#+NAME: gtk.config.font
#+begin_src nix
font = {
  name = "Iosevka";
  size = 12;
};
#+end_src

*** Theme

Gruvbox is good for my eyes.

#+NAME: gtk.config.theme
#+begin_src nix
theme = {
  package = pkgs.gruvbox-dark-gtk;
  name = "gruvbox-dark";
};
#+end_src

*** Icon theme

I said it was good for my eyes.

#+NAME: gtk.config.icon-theme
#+begin_src nix
iconTheme = {
  package = pkgs.gruvbox-dark-icons-gtk;
  name = "oomox-gruvbox-dark";
};
#+end_src

*** Trolltech

Setting qt to use gtk+ style.

#+begin_src conf :tangle generated/trolltech-config.conf
[Qt]
style=GTK+
#+end_src

** Enable

#+NAME: gtk.enable
#+begin_src nix
gtk.enable = true;
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: gtk.symlinked-files
#+begin_src nix
xdg.configFile."Trolltech.conf".source = ./trolltech-config.conf;
#+end_src

* Java

Select the stuff to import:

#+NAME: java.imports
#+begin_src nix
{
  <<java.enable>>
}
#+end_src

** Enable

#+NAME: java.enable
#+begin_src nix
programs.java.enable = true;
#+end_src

* Koreader

Select the stuff to import:

#+NAME: koreader.imports
#+begin_src nix
{
  <<koreader.overlays>>
  <<koreader.packages>>
}
#+end_src

** Overlays

#+NAME: koreader.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<koreader.overlays.koreader-2021-12>>
  )
];
#+end_src

*** Koreader 2021/12

#+NAME: koreader.overlays.koreader-2021-12
#+begin_src nix
self: super:
{
  koreader-2021-12 = super.koreader.overrideAttrs(oldAttr: rec {
    version = "2021.12";

    src = super.fetchurl {
      url =
        let repo = "https://github.com/koreader/koreader";
        in "${repo}/releases/download/v${version}/koreader-${version}-amd64.deb";
      sha256 = "sha256-duOIbYavqmUUkH6RthTYu/SeM8zOeeLm7CIAQwhw6AY=";
    };

    unpackCmd = "dpkg-deb -x ${src} .";
  });
}
#+end_src

** Packages

#+NAME: koreader.packages
#+begin_src nix
home.packages = with pkgs; [
  koreader-2021-12
];
#+end_src

* Neovim

Select the stuff to import:

#+NAME: neovim.imports
#+begin_src nix
{
  <<neovim.config>>
  <<neovim.enable>>
  <<neovim.overlays>>
  <<neovim.symlinked-files>>
}
#+end_src

** Config

#+NAME: neovim.config
#+begin_src nix
programs.neovim = {
  package = pkgs.neovim-nightly;
};
#+end_src

*** Init.vim

#+begin_src lua :tangle generated/neovim-config.vim
lua << EOF
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.title = true
vim.opt.hidden = true
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.showmode = false
vim.opt.wrap = false
vim.opt.updatetime = 300
vim.opt.encoding = 'UTF-8'
vim.opt.tabstop = 8
vim.opt.shiftwidth = 8
vim.opt.softtabstop = 0
vim.opt.expandtab = false
vim.opt.colorcolumn = '80'
vim.opt.filetype = 'on'
vim.opt.spelllang = { 'en', 'es' }
vim.opt.shortmess = vim.opt.shortmess + { c = true }
vim.opt.termguicolors = true
vim.opt.mouse = 'a'
EOF
#+end_src

** Enable

#+NAME: neovim.enable
#+begin_src nix
programs.neovim.enable = true;
#+end_src

** Overlays

Using neovim nightly package.

#+NAME: neovim.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<neovim.overlays.neovim-nightly>>
  )
];
#+end_src

*** Neovim nightly

#+NAME: neovim.overlays.neovim-nightly
#+begin_src nix
let
  repo = "https://github.com/nix-community/neovim-nightly-overlay";
  commit = "7933df62bb350d2f4a258f9e110decc08baaf627";
in import (builtins.fetchTarball {
  url = "${repo}/archive/${commit}.tar.gz";
})
#+end_src

** Symlinked files

#+NAME: neovim.symlinked-files
#+begin_src nix
xdg.configFile."nvim/init.vim".source = ./neovim-config.vim;
#+end_src

* Plantuml

Select the stuff to import:

#+NAME: plantuml.imports
#+begin_src nix
{
  <<plantuml.overlays>>
  <<plantuml.packages>>
  <<plantuml.session-variables>>
}
#+end_src

** Overlays

#+NAME: plantuml.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<plantuml.overlays.plantuml-2021-16>>
  )
];
#+end_src

*** Plantuml 2021-16

#+NAME: plantuml.overlays.plantuml-2021-16
#+begin_src nix
self: super:
{
  plantuml-2021-16 = super.plantuml.overrideAttrs(oldAttr: rec {
    version = "1.2021.16";

    src = super.fetchurl {
      url =
        let repo = "mirror://sourceforge/project/plantuml";
        in "${repo}/${version}/plantuml.${version}.jar";
      sha256 = "sha256-0yN/29VKWiqp2Hi9aIN6GMlfMJPxrewsCQyyPVy6RAM=";
    };
  });
}
#+end_src

** Packages

#+NAME: plantuml.packages
#+begin_src nix
home.packages = with pkgs; [
  plantuml-2021-16
];
#+end_src

** Session Variables

#+NAME: plantuml.session-variables
#+begin_src nix
home.sessionVariables = {
  PLANTUML_BIN = "${pkgs.plantuml-2021-16}/bin/plantuml";
};
#+end_src

* Python

Select the stuff to import:

#+NAME: python.imports
#+begin_src nix
{
  <<python.packages>>
}
#+end_src

** Packages

#+NAME: python.packages
#+begin_src nix
home.packages = with pkgs; [
  (
    let py-pkgs = python-packages: with python-packages; [
          <<python.packages.my-python-pkgs>>
        ];
    in python39.withPackages py-pkgs
  )
];
#+end_src

*** My python pkgs

#+NAME: python.packages.my-python-pkgs
#+begin_src nix
tkinter
#+end_src

* QT

Select the stuff to import:

#+NAME: qt.imports
#+begin_src nix
{
  <<qt.packages>>
}
#+end_src

** Packages

#+NAME: qt.packages
#+begin_src nix
home.packages = with pkgs; [
  libsForQt5.qtstyleplugins
  qt5ct
];
#+end_src

* SSH

Select the stuff to import:

#+NAME: ssh.imports
#+begin_src nix
{
  <<ssh.config>>
  <<ssh.enable>>
}
#+end_src

** Config

#+NAME: ssh.config
#+begin_src nix
programs.ssh = {
  extraConfig =
    ''
    <<ssh.config.extra-config>>
    '';
};
#+end_src

*** Extra config

#+NAME: ssh.config.extra-config
#+begin_src text
Host *
	HostKeyAlgorithms +ssh-rsa
	PubKeyAcceptedKeyTypes +ssh-rsa
#+end_src

** Enable

#+NAME: ssh.enable
#+begin_src nix
programs.ssh.enable = true;
#+end_src

* Starship
** Imports

#+NAME: starship-imports
#+begin_src nix
{
  <<starship-enable>>
}
#+end_src

** Enable

#+NAME: starship-enable
#+begin_src nix
programs.starship.enable = true;
programs.starship.enableZshIntegration = true;
#+end_src

* Swappy
** Imports

#+NAME: swappy-imports
#+begin_src nix
{
  <<swappy-config>>
}
#+end_src

** Config

#+NAME: swappy-config
#+begin_src nix
home.packages = with pkgs; [
  <<swappy-packages>>
];

<<swappy-symlinked-files>>
#+end_src

#+begin_src conf :tangle generated/swappy-config
[Default]
save_dir="$(xdg-user-dir PICTURES)/SS"
save_filename_format=%a-%d-%b-%Y_%H-%M-%S.png
show_panel=true
text_font=Iosevka
#+end_src

** Packages

#+NAME: swappy-packages
#+begin_src nix
slurp
grim
swappy
#+end_src

** Symlinked files

#+NAME: swappy-symlinked-files
#+begin_src nix
xdg.configFile = {
  "swappy/config".source = ./swappy-config;
};
#+end_src

* Sway
** Imports

#+NAME: sway-imports
#+begin_src nix
{
  <<sway-enable>>
}

{
  <<sway-config>>
}
#+end_src

** Enable

#+NAME: sway-enable
#+begin_src nix
wayland.windowManager.sway.enable = true;
wayland.windowManager.sway.wrapperFeatures.gtk = true;
#+end_src

** Config

#+NAME: sway-config
#+begin_src nix
wayland.windowManager.sway = {
  <<sway-config-session-commands>>

  config = {
    keybindings =
      <<sway-config-keybindings>>

    gaps = {
      <<sway-config-gaps>>
    };

    input = {
      <<sway-config-input>>
    };

    output = {
      <<sway-config-output>>
    };

    startup = [
      <<sway-config-startup>>
    ];

    bars = [{
      <<sway-config-bars>>
    }];

    assigns = {
      <<sway-config-assigns>>
    };

    workspaceOutputAssign = [
      <<sway-config-workspace-output-assign>>
    ];

    <<sway-config-others>>
  };
};

home.packages = with pkgs; [
  <<sway-packages>>
];
#+end_src

*** Assigns

#+NAME: sway-config-assigns
#+begin_src nix
"1" = [
  { app_id = "firefox"; }
];

"2" = [
  { app_id = "emacs"; }
  { app_id = "Eclipse"; }
  { app_id = "calibre-ebook-edit"; }
];

"3" = [
  { app_id = "Alacritty"; }
];

"4" = [
  { class = "VirtualBox Manager"; }
  { class = "VirtualBox Machine"; }
];

"5" = [
  { app_id = "luajit-2.1.0-beta3"; } # koreader
  { app_id = "calibre-ebook-viewer"; }
];

"6" = [
  { app_id = "calibre-gui"; }
];

"9" = [
  { class = "discord"; }
];
#+end_src

*** Workspace Output Assign

#+NAME: sway-config-workspace-output-assign
#+begin_src nix
# Browser, VBox, Reader, Music
{ workspace = "1"; output = "eDP-1 HDMI-A-1"; }
{ workspace = "4"; output = "eDP-1 HDMI-A-1"; }
{ workspace = "5"; output = "eDP-1 HDMI-A-1"; }
{ workspace = "7"; output = "eDP-1 HDMI-A-1"; }

# Editor, Terminal, DB, Image Edition, Messages
{ workspace = "2"; output = "HDMI-A-1 eDP-1"; }
{ workspace = "3"; output = "HDMI-A-1 eDP-1"; }
{ workspace = "6"; output = "HDMI-A-1 eDP-1"; }
{ workspace = "8"; output = "HDMI-A-1 eDP-1"; }
{ workspace = "9"; output = "HDMI-A-1 eDP-1"; }
#+end_src

*** Bars

#+NAME: sway-config-bars
#+begin_src nix
command = "${pkgs.waybar}/bin/waybar";
#+end_src

*** Gaps

#+NAME: sway-config-gaps
#+begin_src nix
inner = 5;
#+end_src

*** Input

#+NAME: sway-config-input
#+begin_src nix
"18003:1:foostan_Corne" = {
  xkb_layout = "us";
  xkb_numlock = "disabled";
};

"type:keyboard" = {
  xkb_layout = "dvorak";
  xkb_numlock = "enabled";
};

"type:touchpad" = {
  tap = "enabled";
};
#+end_src

*** Keybindings

#+NAME: sway-config-keybindings
#+begin_src nix
let
  mod = config.wayland.windowManager.sway.config.modifier;
  <<useful-functions.concatSets>>
  <<useful-functions.genSet'>>
  <<useful-functions.capitalize>>
in {
  "${mod}+Return" = "exec ${config.wayland.windowManager.sway.config.terminal}";
  "${mod}+t" = "floating toggle";
  "${mod}+f" = "fullscreen toggle";
  "${mod}+n" = "move workspace to output right";
  "${mod}+Shift+s" = "exec sway-screenshot";
  "${mod}+Shift+w" = "kill";
  "${mod}+Escape" = "exec ${pkgs.swaylock}/bin/swaylock -f";
  "${mod}+Shift+Escape" = "exec sway-exit";
  "Mod1+Space" = "exec ${pkgs.wofi}/bin/wofi --show drun";
  "XF86MonBrightnessUp" = "exec ${pkgs.brightnessctl}/bin/brightnessctl set +2%";
  "XF86MonBrightnessDown" = "exec ${pkgs.brightnessctl}/bin/brightnessctl set 2%-";
}
# Movement
// genSet' ["left" "down" "up" "right"] [
  [ (val: "${mod}+${capitalize val}")
    (val: "focus ${val}")
  ]
  [ (val: "${mod}+Shift+${capitalize val}")
    (val: "move ${val}")
  ]
]
# Workspaces
// genSet' (lib.range 1 9) [
  [ (val: "${mod}+${val}")
    (val: "workspace number ${val}")
  ]
  [ (val: "${mod}+Shift+${val}")
    (val: "move container to workspace number ${val}")
  ]
]
;
#+end_src

*** Others

#+NAME: sway-config-others
#+begin_src nix
modifier = "Mod4";
menu = "${pkgs.wofi}/bin/wofi";
terminal = "${pkgs.wezterm}/bin/wezterm";
workspaceAutoBackAndForth = true;
fonts = {
  names = [ "Iosevka" ];
  style = "Regular";
  size = 12.0;
};
#+end_src

*** Output

#+NAME: sway-config-output
#+begin_src nix
"eDP-1" = {
  resolution = "1920x1080@144.001Hz";
  position = "0,0";
  scale = "1.3";
};

"HDMI-A-1" = {
  resolution = "1920x1080@60Hz";
  position = "1920,0";
};

"*" = {
  bg = "#1d2021 solid_color";
};
#+end_src

*** Session Commands

#+NAME: sway-config-session-commands
#+begin_src nix
extraSessionCommands =
  ''
  export SDL_VIDEODRIVER=wayland
  export QT_QPA_PLATFORM=wayland
  export QT_QPA_PLATFORMTHEME=qt5ct
  export QT_WAYLAND_DISABLE_WINDOWDECORATION="1"
  export _JAVA_AWT_WM_NONREPARENTING=1
  export MOZ_ENABLE_WAYLAND=1
  export GDK_BACKEND=wayland
  export GDK_DPI_SCALE=1
  export WLR_DRM_DEVICES=/dev/dri/card1:/dev/dri/card0
  '';
#+end_src

*** Startup

#+NAME: sway-config-startup
#+begin_src nix
{ command =
    ''
    exec swayidle -w \
         timeout 300 'swaylock -f' \
         timeout 305 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
         before-sleep 'swaylock -f'
    '';
}
#+end_src

** Packages

#+NAME: sway-packages
#+begin_src nix
swayidle
mako
libnotify
wl-clipboard
brightnessctl
pavucontrol
<<sway-scripts>>
#+end_src

** Scripts

#+NAME: sway-scripts
#+begin_src nix
(
  writeShellScriptBin "sway-screenshot"
    ''
    ${pkgs.grim}/bin/grim -g "$(${pkgs.slurp}/bin/slurp)" \
                          -t png \
                          - | ${pkgs.swappy}/bin/swappy -f -
    ''
)

(
  writeShellScriptBin "sway-exit"
    ''
    ${pkgs.sway}/bin/swaynag -t warning \
                             -m 'End session?' \
                             -b 'Yes, exit sway' \
                             'swaymsg exit'
    ''
)
#+end_src

* Swaylock
** Imports

#+NAME: swaylock-imports
#+begin_src nix
{
  <<swaylock-config>>
}
#+end_src

** Config

#+NAME: swaylock-config
#+begin_src nix
<<swaylock-symlinked-files>>

home.packages = with pkgs; [
  <<swaylock-packages>>
];

nixpkgs.overlays = [
  (
    final: prev:
    let
      patchedPkgs = import (builtins.fetchTarball {
        url = "https://github.com/nixos/nixpkgs/archive/ffdadd3ef9167657657d60daf3fe0f1b3176402d.tar.gz";
        sha256 = "1nrz4vzjsf3n8wlnxskgcgcvpwaymrlff690f5njm4nl0rv22hkh";
      }) {
        inherit (prev) system config;
        # inherit (prev) overlays;  # not sure
      };
      patchedPam = patchedPkgs.pam;
    in {
      swaylock = prev.swaylock.override { pam = patchedPam; };
      # apply the same patch to other packages
    }
  )
];
#+end_src

#+begin_src conf :tangle generated/swaylock-config
<<swaylock-config-attempts>>
<<swaylock-config-background>>
<<swaylock-config-font>>
<<swaylock-config-indicator>>
<<swaylock-config-colors-inside>>
<<swaylock-config-colors-highlight>>
<<swaylock-config-colors-ring>>
<<swaylock-config-colors-line>>
<<swaylock-config-colors-separator>>
<<swaylock-config-colors-text>>
#+end_src

*** Attempts

#+NAME: swaylock-config-attempts
#+begin_src conf
show-failed-attempts
ignore-empty-password
#+end_src

*** Background

#+NAME: swaylock-config-background
#+begin_src conf
image=$(xdg-user-dir DOTFILES)/share/img/black-hole.jpg
scaling=stretch
color=000000
#+end_src

*** Font

#+NAME: swaylock-config-font
#+begin_src conf
font=Iosevka
font-size=16
#+end_src

*** Indicator

#+NAME: swaylock-config-indicator
#+begin_src conf
indicator-radius=60
indicator-thickness=6
#+end_src

*** Colors
**** Inside

#+NAME: swaylock-config-colors-inside
#+begin_src conf
inside-color=1d2021ff
inside-clear-color=1d2021ff
inside-caps-lock-color=1d2021ff
inside-ver-color=1d2021ff
inside-wrong-color=1d2021ff
#+end_src

**** Highlight

#+NAME: swaylock-config-colors-highlight
#+begin_src conf
key-hl-color=689d6aff
bs-hl-color=d79921ff
#+end_src

**** Ring

#+NAME: swaylock-config-colors-ring
#+begin_src conf
ring-color=282828ff
ring-clear-color=8ec07cff
ring-caps-lock-color=fe8019ff
ring-ver-color=b8bb26ff
ring-wrong-color=fb4934ff
#+end_src

**** Line

#+NAME: swaylock-config-colors-line
#+begin_src conf
line-color=00000000
line-clear-color=00000000
line-caps-lock-color=00000000
line-ver-color=00000000
line-wrong-color=00000000
#+end_src

**** Separator

#+NAME: swaylock-config-colors-separator
#+begin_src conf
separator-color=00000000
#+end_src

**** Text

#+NAME: swaylock-config-colors-text
#+begin_src conf
text-color=ebdbb2ff
text-clear-color=689d6aff
text-caps-lock-color=d65d0eff
text-ver-color=98971aff
text-wrong-color=cc241dff
#+end_src

** Packages

#+NAME: swaylock-packages
#+begin_src nix
swaylock
#+end_src

** Symlinked files

#+NAME: swaylock-symlinked-files
#+begin_src nix
xdg.configFile = {
  "swaylock/config".source = ./swaylock-config;
};
#+end_src

* Termusic

Select the stuff to import:

#+NAME: termusic.imports
#+begin_src nix
{
  <<termusic.overlays>>
  <<termusic.packages>>
}
#+end_src

** Overlays

#+NAME: termusic.overlays
#+begin_src nix
nixpkgs.overlays = [
  (
    <<termusic.overlays.termusic-0-6-11>>
  )
];
#+end_src

*** Termusic 0-6-11

#+NAME: termusic.overlays.termusic-0-6-11
#+begin_src nix
self: super:
{
  termusic-0-6-11 = super.termusic.overrideAttrs(oldAttr: rec {
    pname = oldAttr.pname;
    version = "0.6.11";

    src = super.fetchCrate {
      inherit version pname;
      sha256 = "sha256-MdFLPlfN+GF1yUkBFH9y22okgUyxnC+/HfcvD7HXDzc=";
    };

    cargoDeps = oldAttr.cargoDeps.overrideAttrs (super.lib.const {
      inherit src;
      name = "${pname}-vendor.tar.gz";
      outputHash = "sha256-L6tbpzUu5hN5Vy5fflT81K6bt+sI/6ru7IAOI63gDvM=";
    });
  });
}
#+end_src

** Packages

#+NAME: termusic.packages
#+begin_src nix
home.packages = with pkgs; [
  termusic-0-6-11
];
#+end_src

* User

Select the stuff to import:

#+NAME: user.imports
#+begin_src nix
{
  <<user.config>>
  <<user.packages>>
  <<user.session-variables>>
}
#+end_src

** Config

The actual user configuration and home directory.

#+NAME: user.config
#+begin_src nix
home.username = "aru";
home.homeDirectory = "/home/${config.home.username}";
#+end_src

** Packages

Other packages not directly under any section:

#+NAME: user.packages
#+begin_src nix
home.packages = with pkgs; [
  # Utilities
  sass
  unzip

  # Ebook reader & editor
  sigil
  calibre

  # QMK
  qmk

  # Music
  yt-dlp
];
#+end_src

** Session Variables

#+NAME: user.session-variables
#+begin_src nix
home.sessionVariables = {
  CALIBRE_USE_DARK_PALETTE = 1;
};
#+end_src

* Waybar
** Imports

#+NAME: waybar-imports
#+begin_src nix
{
  <<waybar-enable>>
}

{
  <<waybar-config>>
}
#+end_src

** Enable

#+NAME: waybar-enable
#+begin_src nix
programs.waybar.enable = true;
#+end_src

** Config

#+NAME: waybar-config
#+begin_src nix
programs.waybar = {
  <<waybar-style>>

  settings = [(
    let big = text: "<span font='17' rise='-3000'>" + text + "</span>";
    in {
      <<waybar-config-others>>
      <<waybar-config-modules-left>>
      <<waybar-config-modules-center>>
      <<waybar-config-modules-right>>

      <<waybar-config-modules-setup-sway-workspaces>>
      <<waybar-config-modules-setup-sway-window>>
      <<waybar-config-modules-setup-clock>>
      <<waybar-config-modules-setup-idle-inhibitor>>
      <<waybar-config-modules-setup-cpu>>
      <<waybar-config-modules-setup-memory>>
      <<waybar-config-modules-setup-backlight>>
      <<waybar-config-modules-setup-disk>>
      <<waybar-config-modules-setup-battery>>
      <<waybar-config-modules-setup-network>>
      <<waybar-config-modules-setup-pulse-audio>>
      <<waybar-config-modules-setup-temperature>>
    }
  )];
};
#+end_src

*** Modules
**** Left

#+NAME: waybar-config-modules-left
#+begin_src nix
modules-left = [
  "sway/workspaces"
  "sway/window"
];
#+end_src

**** Center

#+NAME: waybar-config-modules-center
#+begin_src nix
modules-center = [
  "clock"
  "idle_inhibitor"
];
#+end_src

**** Right

#+NAME: waybar-config-modules-right
#+begin_src nix
modules-right = [
  "cpu"
  "memory"
  "backlight"
  "disk"
  "battery"
  "network"
  "pulseaudio"
  "temperature"
];
#+end_src

**** Config
***** Sway
****** Workspaces

#+NAME: waybar-config-modules-setup-sway-workspaces
#+begin_src nix
"sway/workspaces" = {
  format = ''${big "{icon}"}'';

  format-icons = {
    "1" = "";
    "2" = ""; # I need an emacs icon
    "3" = "";
    "4" = ""; # There is no vbox icon
    "5" = "";
    "6" = "";
    "7" = "";
    "8" = "";
    "9" = "ﭮ";
    "urgent" = "";
    "focused" = "";
    "default" = "";
  };
};
#+end_src

****** Window

#+NAME: waybar-config-modules-setup-sway-window
#+begin_src nix
"sway/window" = {
  format = "{}";
  format-alt = ''${big ""}'';
  max-length = 80;
  tooltip = false;

  rewrite = {
    "(.*) — Mozilla Firefox" = ''${big ""} $1'';
    "(.*) — Mozilla Firefox \\(Private Browsing\\)" = ''${big " ﴣ"} $1'';
    "(.*) - GNU Emacs.*" = ''${big ""} $1'';
    "(.*) - Eclipse IDE.*" = ''${big ""} $1'';
    "(.*) - Oracle VM VirtualBox" = ''${big ""} $1'';
  };
};
#+end_src

***** Clock

#+NAME: waybar-config-modules-setup-clock
#+begin_src nix
clock = {
  interval = 1;
  format = ''{:%H:%M:%S} ${big ""}'';
  format-alt = ''{:%A %d, %B %Y} ${big ""}'';
  tooltip = false;
};
#+end_src

***** Idle inhibitor

#+NAME: waybar-config-modules-setup-idle-inhibitor
#+begin_src nix
idle_inhibitor = {
  format = ''${big "{icon}"}'';
  tooltip = false;
  on-click-right = "exec swaylock -f";
  on-click-middle = "exec swayidle timeout 1 'swaylock -f' timeout 2 'swaymsg \"output * dpms off\"' resume 'swaymsg \"output * dpms on\" && pkill -n swayidle' before-sleep 'swaylock -f'";

  format-icons = {
    activated = "";
    deactivated = "";
  };
};
#+end_src

***** Cpu

#+NAME: waybar-config-modules-setup-cpu
#+begin_src nix
cpu = {
  interval = 5;
  format = ''{usage}% ${big ""}'';
  format-alt = ''${big " "}'';
  states = {
    notIdle = 20;
    doinHeavyStuff = 50;
    compiling = 80;
  };
  tooltip = false;
};
#+end_src

***** Memory

#+NAME: waybar-config-modules-setup-memory
#+begin_src nix
memory = {
  interval = 5;
  format = ''{used:0.1f}G/{total:0.1f}G ${big ""}'';
  format-alt = ''${big " "}'';
  states = {
    someTabsOpened = 20;
    VMOpened = 50;
    chromeTabsOpened = 80;
  };
  tooltip = false;
};
#+end_src

***** Backlight

#+NAME: waybar-config-modules-setup-backlight
#+begin_src nix
backlight = {
  interval = 5;
  format = ''{percent}% ${big "{icon}"}'';
  format-alt = ''${big " {icon}"}'';
  format-icons = [ "" "" ];
  tooltip = false;
  on-scroll-up = "exec ${pkgs.brightnessctl}/bin/brightnessctl set +1%";
  on-scroll-down = "exec ${pkgs.brightnessctl}/bin/brightnessctl set 1%-";
};
#+end_src

***** Disk

#+NAME: waybar-config-modules-setup-disk
#+begin_src nix
disk = {
  interval = 30;
  format = ''${big " "}'';
  format-alt = ''{used}/{total} ${big ""}'';
  path = "/";
  states = {
    cleanDownloads = 20;
    cleanNixStore = 50;
    removeISOsAndVMsLOL = 80;
  };
  tooltip = false;
};
#+end_src

***** Battery

#+NAME: waybar-config-modules-setup-battery
#+begin_src nix
battery = {
  interval = 60;
  bat = "BAT1";
  format = ''{capacity}% ${big "{icon}"}'';
  format-alt = ''${big " {icon}"}'';
  format-icons = [ "" "" "" "" "" ];
  states = {
    runAndGetTheCharger = 20;
    prepareToRun = 40;
    tisGoinLow = 60;
  };
  tooltip = false;
};
#+end_src

***** Network

#+NAME: waybar-config-modules-setup-network
#+begin_src nix
network = {
  interval = 5;
  format-wifi = ''${big " 直"}'';
  format-ethernet = ''${big " "}'';
  format-disconnected = ''${big ""}'';
  format-alt = ''{essid}: {ipaddr} | {bandwidthUpBits} ${big ""} {bandwidthDownBits} ${big ""}'';
  tooltip = false;
};
#+end_src

***** Pulse audio

#+NAME: waybar-config-modules-setup-pulse-audio
#+begin_src nix
pulseaudio = {
  format = ''{volume}% ${big "{icon}"}'';
  format-muted = ''{volume}% ${big " {icon}"}'';
  format-source-muted = ''{volume}% ${big " {icon}"}'';
  format-alt = ''${big " {icon}"}'';
  tooltip = false;
  on-click-right = "exec ${pkgs.pulseaudio}/bin/pactl set-sink-mute @DEFAULT_SINK@ toggle";
  on-click-middle = "exec ${pkgs.pavucontrol}/bin/pavucontrol";

  format-icons = {
    headphone = "";
    headset = "";
    hands-free = "";
    speaker = "蓼";
    hifi = "醙";
    hdmi = "﴿";
    phone = "";
    portable = "";
    car = "";
    default = [ "" "" "" ];
  };
};
#+end_src

***** Temperature

#+NAME: waybar-config-modules-setup-temperature
#+begin_src nix
temperature = {
  interval = 5;
  format = ''{temperatureC}°C ${big "{icon}"}'';
  format-alt = ''${big " {icon}"}'';
  format-icons = [ "" "" "" "" "" ];
  tooltip = false;
  critical-threshold = 80;
};
#+end_src

*** Style

#+NAME: waybar-style
#+begin_src nix
style = ./waybar-style.css;
#+end_src

#+begin_src css :tangle generated/waybar-style.css
*{
	border: none;
	border-radius: inherit;
	margin: 0;
	padding: 0;
	font-family: 'Iosevka', monospace;
	font-weight: 700;
	font-size: 13px;
	background: none;
	background-color: inherit;
	box-shadow: none;
	text-shadow: none;
}

#workspaces,
#clock,
#idle_inhibitor,
#cpu,
#temperature,
#memory,
#backlight,
#disk,
#battery,
#network,
#pulseaudio,
#window {
	padding: 0 10px;
	background-color: #282828;
	border-radius: 15px;
	margin-left: 10px;
}

#window {
	color: #ebdbb2;
}

#workspaces {
	padding: 0;
	margin: 0;
}

#workspaces button {
	min-width: 30px;
	color: #b16286;
	border-radius: 15px;
}

#workspaces button:hover {
	background-color: #3c3836;
}

#workspaces button.focused {
	color: #98971a;
}

#clock,
#idle_inhibitor {
	color: #b16286;
}

#backlight,
#network,
#pulseaudio {
	color: #458588;
}

#cpu,
#memory,
#disk,
#battery,
#temperature {
	color: #689d6a;
}

#cpu.notIdle,
#memory.someTabsOpened,
#disk.cleanDownloads,
#battery.tisGoinLow {
	color: #d79921;
}

#cpu.doinHeavyStuff,
#memory.VMOpened,
#disk.cleanNixStore,
#battery.prepareToRun {
	color: #d65d0e;
}

#cpu.compiling,
#memory.chromeTabsOpened,
#disk.removeISOsAndVMsLOL,
#battery.runAndGetTheCharger,
#temperature.critical {
	color: #cc241d;
}
#+end_src

*** Others

#+NAME: waybar-config-others
#+begin_src nix
height = 30;
layer = "top";
margin = "5 5 0";
#+end_src

* Wezterm

Select the stuff to import:

#+NAME: wezterm.imports
#+begin_src nix
{
  <<wezterm.packages>>
  <<wezterm.symlinked-files>>
}
#+end_src

** Config

#+begin_src lua :tangle generated/wezterm-config.lua
local wezterm = require 'wezterm';

return {
    enable_wayland = true,
    front_end = "OpenGL",

    <<wezterm.config.fonts>>
    <<wezterm.config.tab-bar>>
    <<wezterm.config.scroll>>

    colors = {
        <<wezterm.config.colors>>
    },

    keys = {
        <<wezterm.config.keys>>
    },
}
#+end_src

*** Fonts

#+NAME: wezterm.config.fonts
#+begin_src lua
font = wezterm.font_with_fallback({
    { family = "Iosevka", weight = "Medium" },
    "Noto Sans Symbols2",
}),

font_shaper = "Harfbuzz",
bold_brightens_ansi_colors = true,
font_size = 12.0,
allow_square_glyphs_to_overflow_width = "WhenFollowedBySpace",
#+end_src

*** Colors

#+NAME: wezterm.config.colors
#+begin_src lua
foreground = "#ebdbb2",
background = "#1d2021",
cursor_bg = "#ebdbb2",
cursor_border = "#ebdbb2",
cursor_fg = "#1d2021",
selection_bg = "#ebdbb2",
selection_fg = "#1d2021",

ansi = {
    "#282828",
    "#cc241d",
    "#98971a",
    "#d79921",
    "#458588",
    "#b16286",
    "#689d6a",
    "#a89984"
},

brights = {
    "#928374",
    "#fb4934",
    "#b8bb26",
    "#fabd2f",
    "#83a598",
    "#d3869b",
    "#8ec07c",
    "#ebdbb2"
},

tab_bar = {
    <<wezterm.config.tab-bar.colors>>
},
#+end_src

*** Tab bar

#+NAME: wezterm.config.tab-bar
#+begin_src lua
use_fancy_tab_bar = false,
-- hide_tab_bar_if_only_one_tab = true,
tab_bar_at_bottom = true,
#+end_src

**** Colors

#+NAME: wezterm.config.tab-bar.colors
#+begin_src lua
background = "#1d2021",

active_tab = {
    bg_color = "#282828",
    fg_color = "#689d6a",
},

inactive_tab = {
    bg_color = "#3c3836",
    fg_color = "#427b58",
},

inactive_tab_hover = {
    bg_color = "#504945",
    fg_color = "#427b58",
},

new_tab = {
    bg_color = "#282828",
    fg_color = "#458588",
},

new_tab_hover = {
    bg_color = "#504945",
    fg_color = "#458588",
},
#+end_src

*** Scroll

#+NAME: wezterm.config.scroll
#+begin_src lua
scrollback_lines = 10000,
#+end_src

*** Keys

#+NAME: wezterm.config.keys
#+begin_src lua
{
    key = "Enter",
    mods = "SHIFT|CTRL",
    action = wezterm.action { SpawnTab = "CurrentPaneDomain" }
},

{
    key = "w",
    mods = "SHIFT|CTRL",
    action = wezterm.action { CloseCurrentTab = { confirm = false } },
},
#+end_src

** Packages

#+NAME: wezterm.packages
#+begin_src nix
home.packages = with pkgs; [
  wezterm
];
#+end_src

** Symlinked files

Files to be symlinked in the user directory (actually under
~XDG_CONFIG_HOME~).

#+NAME: wezterm.symlinked-files
#+begin_src nix
xdg.configFile = {
  "wezterm/wezterm.lua".source = ./wezterm-config.lua;
};
#+end_src

* Wofi
** Imports

#+NAME: wofi-imports
#+begin_src nix
{
  <<wofi-config>>
}
#+end_src

** Config

#+NAME: wofi-config
#+begin_src nix
<<wofi-symlinked-files>>

home.packages = with pkgs; [
  <<wofi-packages>>
];
#+end_src

#+begin_src conf :tangle generated/wofi-config
<<wofi-config-size>>
<<wofi-config-images>>
<<wofi-config-search>>
<<wofi-config-others>>
#+end_src

*** Size

#+NAME: wofi-config-size
#+begin_src conf
width=40%
lines=8
#+end_src

*** Images

#+NAME: wofi-config-images
#+begin_src conf
allow_images=true
image_size=24
#+end_src

*** Search

#+NAME: wofi-config-search
#+begin_src conf
prompt=
insensitive=true
#+end_src

*** Others

#+NAME: wofi-config-others
#+begin_src conf
term=alacritty
#+end_src

*** Style

#+begin_src css :tangle generated/wofi-style.css
window {
	border-radius: 15px;
}

#outer-box {
	padding: 5px;
}

#inner-box {
	margin-right: 15px;
}

#input {
	border-radius: 15px;
	padding: 5px;
	border: none;
}

#scroll {
	margin-top: 5px;
}

#entry {
	border-radius: 15px;
	padding: 5px;
	outline: none;
}

#text {
	font-weight: 700;
}

#img {
	margin-right: 5px;
}
#+end_src

** Packages

#+NAME: wofi-packages
#+begin_src nix
wofi
#+end_src

** Symlinked files

#+NAME: wofi-symlinked-files
#+begin_src nix
xdg.configFile = {
  "wofi/config".source = ./wofi-config;
  "wofi/style.css".source = ./wofi-style.css;
};
#+end_src

* Xdg
** Imports

#+NAME: xdg-imports
#+begin_src nix
{
  <<xdg-enable>>
}

{
  <<xdg-config>>
}
#+end_src

** Enable

#+NAME: xdg-enable
#+begin_src nix
xdg.enable = true;
xdg.mimeApps.enable = true;
xdg.userDirs.enable = true;
#+end_src

** Config

#+NAME: xdg-config
#+begin_src nix
xdg = {
  <<xdg-config-user-dot-directories>>

  userDirs = {
    <<xdg-config-user-directories>>

    extraConfig = {
      <<xdg-config-extra-directories>>
    };
  };
};

home.packages = with pkgs; [
  <<xdg-packages>>
];
#+end_src

*** User directories

#+NAME: xdg-config-user-directories
#+begin_src nix
desktop = "$HOME/Tmp/Desktop";
documents = "$HOME/Archive";
download = "$HOME/Tmp";
music = "${config.xdg.userDirs.documents}/Audio";
pictures = "${config.xdg.userDirs.documents}/Images";
templates = "${config.xdg.userDirs.documents}/Templates";
videos = "${config.xdg.userDirs.documents}/Video";
#+end_src

*** User "dot" directories

#+NAME: xdg-config-user-dot-directories
#+begin_src nix
configHome = ~/.dotfiles/config;
cacheHome = ~/.dotfiles/cache;
dataHome = ~/.dotfiles/local/share;
stateHome = ~/.dotfiles/local/state;
#+end_src

*** Extra directories

#+NAME: xdg-config-extra-directories
#+begin_src nix
XDG_DOTFILES_DIR = "$HOME/Dotfiles.nix";
XDG_MAIL_DIR = "${config.xdg.userDirs.documents}/Mail";
XDG_KEYS_DIR = "${config.xdg.userDirs.documents}/Keys";
#+end_src

** Packages

#+NAME: xdg-packages
#+begin_src nix
xdg-user-dirs
xdg-utils
#+end_src

* Zsh
** Imports

#+NAME: zsh-imports
#+begin_src nix
{
  <<zsh-enable>>
}

{
  <<zsh-config>>
}
#+end_src

** Enable

#+NAME: zsh-enable
#+begin_src nix
programs.zsh.enable = true;
programs.zsh.enableAutosuggestions = true;
programs.zsh.enableCompletion = true;
programs.zsh.enableSyntaxHighlighting = true;
programs.zsh.autocd = true;
#+end_src

** Config

#+NAME: zsh-config
#+begin_src nix
programs.zsh = {
  # Gets rid of the $HOME part of $XDG_CONFIG_HOME
  # Since zDotDir is a relative path to $HOME
  dotDir =
    let configHome =
          builtins.elemAt
            (builtins.split
              "${config.home.homeDirectory}/"
              "${builtins.toString config.xdg.configHome}")
            2;
    in "${configHome}/zsh";

  history = {
    <<zsh-config-history>>
  };

  shellAliases = {
    <<zsh-config-aliases>>
  };

  shellGlobalAliases = {
    <<zsh-config-shell-global-aliases>>
  };

  sessionVariables = {
    <<zsh-config-session-variables>>
  };

  initExtra =
    ''
    <<zsh-config-init-extra>>
    '';
};
#+end_src

*** History

#+NAME: zsh-config-history
#+begin_src nix
extended = true;
ignoreSpace = true;
ignorePatterns = [
  "l"
  "kill *"
];
save = 99999;
size = 99999;
path = "${config.xdg.dataHome}/zsh/history";
#+end_src

*** Init extra

#+NAME: zsh-config-init-extra
#+begin_src shell
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "\e[3~"   delete-char

if [ "$TERM" = "linux" ]; then
  echo -en "\e]P01D2021" #black
  echo -en "\e]P8282828" #darkgrey
  echo -en "\e]P1CC241D" #darkred
  echo -en "\e]P9FB4934" #red
  echo -en "\e]P298971A" #darkgreen
  echo -en "\e]PAB8BB26" #green
  echo -en "\e]P3D65D0E" #brown
  echo -en "\e]PBD79921" #yellow
  echo -en "\e]P4458588" #darkblue
  echo -en "\e]PC83A598" #blue
  echo -en "\e]P5B16286" #darkmagenta
  echo -en "\e]PDD3869B" #magenta
  echo -en "\e]P6689D6A" #darkcyan
  echo -en "\e]PE8EC07C" #cyan
  echo -en "\e]P7A89984" #lightgrey
  echo -en "\e]PFEBDBB2" #white
  clear #for background artifacting
fi
#+end_src

*** Session variables

#+NAME: zsh-config-session-variables
#+begin_src nix
STARSHIP_CACHE = "${config.xdg.cacheHome}/starship/history";
#+end_src

*** Shell aliases

#+NAME: zsh-config-aliases
#+begin_src nix
"l" = "ls --color=always --group-directories-first -lhA";
#+end_src

*** Shell global aliases

#+NAME: zsh-config-shell-global-aliases
#+begin_src nix
G = "| grep";
L = "| less";
#+end_src

* Useful functions

#+NAME: useful-functions.capitalize
#+begin_src nix
capitalize = string:
  let splits = builtins.split "(^.)" string;
  in
    (lib.toUpper (builtins.elemAt (builtins.elemAt splits 1) 0))
    + (builtins.elemAt splits 2);
#+end_src

#+NAME: useful-functions.genSet
#+begin_src nix
genSet = values: fname: fvalue:
  builtins.listToAttrs (builtins.map
    (val: lib.nameValuePair
      (fname (toString val))
      (fvalue (toString val)))
    values);
#+end_src

#+NAME: useful-functions.concatSets
#+begin_src nix
concatSets = list:
  builtins.foldl' (result: val: result // val) {} list;
#+end_src

#+NAME: useful-functions.genSet'
#+begin_src nix
genSet' = values: fnames-fvalues:
  concatSets (builtins.map
    (val: builtins.listToAttrs
      (builtins.map (item:
        lib.nameValuePair
          ((builtins.elemAt item 0) (toString val))
          ((builtins.elemAt item 1) (toString val)))
        fnames-fvalues))
    values);
#+end_src
