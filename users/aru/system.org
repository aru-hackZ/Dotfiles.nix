#+TITLE: System Configuration
#+PROPERTY: header-args :noweb no-export :mkdirp yes

This is my user specific system configuration which you can generate
with ~M-x org-babel-tangle~.

This is the main ~system.nix~ which just imports the generated
system config.

#+begin_src nix :tangle system.nix
{ ...
}:

{
  imports = [ ./generated/system-config.nix ];
}
#+end_src

* System
** Config

This is the actual main config, which imports the selected
configurations.

#+begin_src nix :tangle generated/system-config.nix
# Auto-generated from "system.org"

{ pkgs
, ...
}:

{
  <<system.setup>>

  imports = [
    <<activation-scripts.imports>>
    <<boot.imports>>
    <<hardware.imports>>
    <<networking.imports>>
    <<nix.imports>>
    <<others.imports>>
    <<programs.imports>>
    <<security.imports>>
    <<services.imports>>
    <<users-and-groups.imports>>
    <<virtualisation.imports>>
  ];
}
#+end_src

** Setup

#+NAME: system.setup
#+begin_src nix
system.stateVersion = "22.05";
#+end_src

* Activation Scripts

#+NAME: activation-scripts.imports
#+begin_src nix
{
  <<activation-scripts.config>>
}
#+end_src

** Config

#+NAME: activation-scripts.config
#+begin_src nix
system.activationScripts = {
  setGitReposPermissions =
    ''
    <<activation-scripts.config.set-git-repos-permissions>>
    '';
};
#+end_src

*** Set /GitRepos permissions

#+NAME: activation-scripts.config.set-git-repos-permissions
#+begin_src shell
[[ -d /GitRepos ]] && \
    chown root:2001 /GitRepos && \
    chmod 2775 /GitRepos
#+end_src

* Boot

#+NAME: boot.imports
#+begin_src nix
{
  <<boot.config>>
}
#+end_src

** Config

#+NAME: boot.config
#+begin_src nix
boot = {
  kernelPackages = pkgs.linuxPackages_latest;

  loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };
};
#+end_src

* Hardware

#+NAME: hardware.imports
#+begin_src nix
{
  <<hardware.config>>
}
#+end_src

** Config

#+NAME: hardware.config
#+begin_src nix
hardware = {
  pulseaudio.enable = true;

  # So sway works
  opengl = {
    enable = true;
    driSupport = true;
  };
};
#+end_src

* Networking

#+NAME: networking.imports
#+begin_src nix
{
  <<networking.config>>
}
#+end_src

** Config

#+NAME: networking.config
#+begin_src nix
networking = {
  hostName = "aru-hackZ";

  # This one is deprecated
  useDHCP = false;

  networkmanager.enable = true;

  # Interfaces are activated in /system/hardware/<your-laptop-or-pc-model>.nix
};
#+end_src

* Nix

#+NAME: nix.imports
#+begin_src nix
{
  <<nix.config>>
}
#+end_src

** Config

#+NAME: nix.config
#+begin_src nix
nix = {
  settings.allowed-users = [ "aru" ];
};
#+end_src

* Others

#+NAME: others.imports
#+begin_src nix
{
  <<others.config>>
}
#+end_src

** Config

#+NAME: others.config
#+begin_src nix
time.timeZone = "Europe/Madrid";
i18n.defaultLocale = "en_US.UTF-8";
sound.enable = true;
#+end_src

* Programs

#+NAME: programs.imports
#+begin_src nix
{
  <<programs.config>>
}
#+end_src

** Config

#+NAME: programs.config
#+begin_src nix
programs = {
  # So home-manager doesn't complain (when adding gtk)
  dconf.enable = true;
};
#+end_src

* Security

#+NAME: security.imports
#+begin_src nix
{
  <<security.config>>
}
#+end_src

** Config

#+NAME: security.config
#+begin_src nix
security = {
  # So swaylock works
  pam.services.swaylock.text =
    ''
    auth include login
    '';
};
#+end_src

* Services

#+NAME: services.imports
#+begin_src nix
{
  <<services.config>>
}
#+end_src

** Config

#+NAME: services.config
#+begin_src nix
services = {
  udev.packages = with pkgs; [
    qmk-udev-rules
  ];
};
#+end_src

* Users and groups

#+NAME: users-and-groups.imports
#+begin_src nix
{
  <<users-and-groups.config>>
}
#+end_src

** Config

#+NAME: users-and-groups.config
#+begin_src nix
users = {
  mutableUsers = false;

  users = {
    aru = {
      isNormalUser = true;
      createHome = true;
      uid = 6262;
      # Pretty long right
      hashedPassword =
        "$6$kW4T4vV/$JjK0WjLDpsD.9jVqFsdAfy267.W8iEia6wEsrbD/DWNk2spUr2UxTRRsBdLgk2DfSRoaAdUC/PhW7o2UAjyed0" ;
      shell = pkgs.zsh;

      extraGroups = [
        "wheel"
        "networkmanager"
        "vboxusers"
        "GitReposEditors"
        "video"
      ];
    };
  };

  groups = {
    GitReposEditors = {
      gid = 2001;
    };
  };
};
#+end_src

* Virtualisation

#+NAME: virtualisation.imports
#+begin_src nix
{
  <<virtualisation.config>>
}
#+end_src

** Config

#+NAME: virtualisation.config
#+begin_src nix
virtualisation = {
  virtualbox.host.enable = true;
};
#+end_src
